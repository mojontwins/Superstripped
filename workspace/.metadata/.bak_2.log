!SESSION 2025-07-15 16:37:48.308 -----------------------------------------------
eclipse.buildId=4.18.0.I20201202-1800
java.version=15.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=es_ES
Framework arguments:  -product org.eclipse.epp.package.java.product -product org.eclipse.epp.package.java.product -product org.eclipse.epp.package.java.product -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product -product org.eclipse.epp.package.java.product -product org.eclipse.epp.package.java.product -data D:\Cosas\MP125\superstripped\workspace -product org.eclipse.epp.package.java.product

This is a continuation of log file D:\Cosas\MP125\superstripped\workspace\.metadata\.bak_1.log
Created Time: 2025-07-15 23:27:49.461

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:27:49.463
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.util.List;
import java.util.Random;

import com.mojontwins.minecraft.feature.FeatureProvider;

public class ChunkProviderGenerate implements IChunkProvider {
	protected Random rand;
	protected NoiseGeneratorOctaves noiseGen1;
	protected NoiseGeneratorOctaves noiseGen2;
	protected NoiseGeneratorOctaves noiseGen3;
	protected NoiseGeneratorOctaves noiseGenStone;
	protected NoiseGeneratorOctaves noiseGen5;
	protected NoiseGeneratorOctaves noiseGen6;
	
	protected World worldObj;
	protected final boolean mapFeaturesEnabled;
	
	protected double[] noiseArray;
	protected double[] stoneNoise = new double[256];
	
	protected MapGenBase caveGenerator = new MapGenCaves();
	protected MapGenBase ravineGenerator = new MapGenRavine();
	protected MapGenStronghold strongholdGenerator = new MapGenStronghold();
	protected MapGenVillage villageGenerator = new MapGenVillage(0);
	protected MapGenMineshaft mineshaftGenerator = new MapGenMineshaft();
	
	// Multi-chunk features	
	public FeatureProvider featureProvider;
	
	protected BiomeGenBase[] biomesForGeneration;
	
	double[] noise3;
	double[] noise1;
	double[] noise2;
	double[] noise5;
	double[] noise6;
	float[] distanceArray;
	int[][] unusedArray = new int[32][32];
	protected boolean isOcean;

	public ChunkProviderGenerate(World world1, long j2, boolean z4) {
		this.worldObj = world1;
		this.mapFeaturesEnabled = z4;
		this.rand = new Random(j2);
		this.noiseGen1 = new NoiseGeneratorOctaves(this.rand, 16);
		this.noiseGen2 = new NoiseGeneratorOctaves(this.rand, 16);
		this.noiseGen3 = new NoiseGeneratorOctaves(this.rand, 8);
		this.noiseGenStone = new NoiseGeneratorOctaves(this.rand, 4);
		this.noiseGen5 = new NoiseGeneratorOctaves(this.rand, 10);
		this.noiseGen6 = new NoiseGeneratorOctaves(this.rand, 16);
		
		this.featureProvider = new FeatureProvider(worldObj, this);
	}

	public void generateTerrain(int chunkX, int chunkZ, byte[] blocks) {
		int quadrantSize = 4;
		int seaLevel = 64;
		int cellSize = quadrantSize + 1;
		int columnSize = 17;
		
		double scalingFactor = 0.25D;
		this.isOcean = true;

		// Split in 4x16x4 sections
		for(int xSection = 0; xSection < quadrantSize; ++xSection) {
			for(int zSection = 0; zSection < quadrantSize; ++zSection) {
				
				for(int ySection = 0; ySection < 16; ++ySection) {

					double noiseA = this.noiseArray[((xSection + 0) * cellSize + zSection + 0) * columnSize + ySection + 0];
					double noiseB = this.noiseArray[((xSection + 0) * cellSize + zSection + 1) * columnSize + ySection + 0];
					double noiseC = this.noiseArray[((xSection + 1) * cellSize + zSection + 0) * columnSize + ySection + 0];
					double noiseD = this.noiseArray[((xSection + 1) * cellSize + zSection + 1) * columnSize + ySection + 0];
					double noiseAinc = (this.noiseArray[((xSection + 0) * cellSize + zSection + 0) * columnSize + ySection + 1] - noiseA) * 0.125D;
					double noiseBinc = (this.noiseArray[((xSection + 0) * cellSize + zSection + 1) * columnSize + ySection + 1] - noiseB) * 0.125D;
					double noiseCinc = (this.noiseArray[((xSection + 1) * cellSize + zSection + 0) * columnSize + ySection + 1] - noiseC) * 0.125D;
					double noiseDinc = (this.noiseArray[((xSection + 1) * cellSize + zSection + 1) * columnSize + ySection + 1] - noiseD) * 0.125D;

					for(int y = 0; y < 8; ++y) {						
						double curNoiseA = noiseA;
						double curNoiseB = noiseB;
						double curNoiseAinc = (noiseC - noiseA) * scalingFactor;
						double curNoiseBinc = (noiseD - noiseB) * scalingFactor;

						for(int x = 0; x < 4; ++x) {
							int indexInBlockArray = (x + (xSection << 2)) << 11 | (0 + (zSection << 2)) << 7 | (ySection << 3) + y;
							
							double density = curNoiseA;
							double densityIncrement = (curNoiseB - curNoiseA) * 0.25D;

							int yy = ySection * 8 + y;
							for(int z = 0; z < 4; ++z) {
								
								int blockID = 0;

								// Fill with water with a layer of ice if suitable								
								if(yy < seaLevel) {
									blockID = Block.waterStill.blockID;
								}

								// World density positive: fill with block.
								if(density > 0.0D) {
									blockID = Block.stone.blockID;
								}

								blocks[indexInBlockArray] = (byte)blockID;

								// Next Z
								indexInBlockArray += 128;
								density += densityIncrement;
								
								// Ocean detector
								if(yy == seaLevel - 1) this.isOcean &= (blockID != Block.stone.blockID);
							}

							curNoiseA += curNoiseAinc;
							curNoiseB += curNoiseBinc;
						}

						noiseA += noiseAinc;
						noiseB += noiseBinc;
						noiseC += noiseCinc;
						noiseD += noiseDinc;
					}
				}
			}
		}
	}

	public void replaceBlocksForBiome(int chunkX, int chunkZ, byte[] blocks, byte[] metadata, BiomeGenBase[] biomes) {
		byte seaLevel = 63;
		double d6 = 8.0D / 256D;
		this.stoneNoise = this.noiseGenStone.generateNoiseOctaves(this.stoneNoise, chunkX * 16, chunkZ * 16, 0, 16, 16, 1, d6 * 2.0D, d6 * 2.0D, d6 * 2.0D);

		BiomeGenBase biomeGen;
		
		for(int z = 0; z < 16; ++z) {
			for(int x = 0; x < 16; ++x) {
				biomeGen = biomes[x + z * 16];
				
				biomeGen.replaceBlocksForBiome(this, this.worldObj, this.rand, 
						chunkX, chunkZ, x, z, 
						blocks, metadata, seaLevel, 
						null, null, this.stoneNoise[z + x * 16]);
			}
		}
		
				
				float temperature = biomeGen.getFloatTemperature();
				int height = (int)(this.stoneNoise[z + x * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
				
				int stoneHeight = -1;
				byte topBlock = biomeGen.getTopBlock(this.rand);
				byte fillerBlock = biomeGen.getFillBlock(this.rand);

				for(int y = 127; y >= 0; --y) {
					int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
					if(y <= 0 + this.rand.nextInt(5)) {
						blocks[index] = (byte)Block.bedrock.blockID;
					} else {
						byte blockID = blocks[index];
						if(blockID == 0) {
							stoneHeight = -1;
						} else if(blockID == Block.stone.blockID) {
							if(stoneHeight == -1) {
								if(height <= 0) {
									topBlock = 0;
									fillerBlock = (byte)Block.stone.blockID;
								} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
									topBlock = biomeGen.getTopBlock(this.rand);
									fillerBlock = biomeGen.getFillBlock(this.rand);
								}

								if(y < seaLevel && topBlock == 0) {
									if(temperature < 0.15F) {
										topBlock = (byte)Block.ice.blockID;
									} else {
										topBlock = (byte)Block.waterStill.blockID;
									}
								}

								stoneHeight = height;
								if(y >= seaLevel - 1) {
									blocks[index] = topBlock;
								} else {
									blocks[index] = fillerBlock;
								}
							} else if(stoneHeight > 0) {
								--stoneHeight;
								blocks[index] = fillerBlock;
								if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
									stoneHeight = this.rand.nextInt(4);
									fillerBlock = this.sandstoneGenBlock();
								}
							}
						}
					}
				}
			}
		}

	}

	public Chunk loadChunk(int i1, int i2) {
		return this.provideChunk(i1, i2);
	}
	
	protected byte[] createByteArray() {
		return new byte[32768];
	}

	public Chunk provideChunk(int chunkX, int chunkZ) {
		this.rand.setSeed((long)chunkX * 341873128712L + (long)chunkZ * 132897987541L);

		byte[] blockArray = this.createByteArray();
		byte[] metadataArray = this.createByteArray();
		this.generateTerrain(chunkX, chunkZ, blockArray);

		this.biomesForGeneration = this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration, chunkX * 16, chunkZ * 16, 16, 16);
		
		this.replaceBlocksForBiome(chunkX, chunkZ, blockArray, metadataArray, this.biomesForGeneration);
		
		this.caveGenerator.generate(this, this.worldObj, chunkX, chunkZ, blockArray);
		this.ravineGenerator.generate(this, this.worldObj, chunkX, chunkZ, blockArray);
		
		if(this.mapFeaturesEnabled && SoftLock.hasReleaseStructures()) {
			this.mineshaftGenerator.generate(this, this.worldObj, chunkX, chunkZ, blockArray);
			this.villageGenerator.generate(this, this.worldObj, chunkX, chunkZ, blockArray);
			this.strongholdGenerator.generate(this, this.worldObj, chunkX, chunkZ, blockArray);
		}

		Chunk chunk = new Chunk(this.worldObj, blockArray, chunkX, chunkZ);

		if (this.mapFeaturesEnabled) {
			this.featureProvider.getNearestFeatures(chunkX, chunkZ, chunk);
		} 

		byte[] biomeArray = chunk.getBiomeArray();

		for(int i6 = 0; i6 < biomeArray.length; ++i6) {
			biomeArray[i6] = (byte)this.biomesForGeneration[i6].biomeID;
		}

		chunk.generateSkylightMap();
		return chunk;
	}

	public Chunk justGenerate(int chunkX, int chunkZ) {
		this.rand.setSeed((long)chunkX * 341873128712L + (long)chunkZ * 132897987541L);
		byte[] blockArray = this.createByteArray();
		this.generateTerrain(chunkX, chunkZ, blockArray);
		
		Chunk chunk = new Chunk(this.worldObj, blockArray, chunkX, chunkZ);
		
		return chunk;
	}

	public double[] initializeNoiseField(double[] d1, int i2, int i3, int i4, int i5, int i6, int i7) {
		if(d1 == null) {
			d1 = new double[i5 * i6 * i7];
		}

		if(this.distanceArray == null) {
			this.distanceArray = new float[25];

			for(int i8 = -2; i8 <= 2; ++i8) {
				for(int i9 = -2; i9 <= 2; ++i9) {
					float f10 = 10.0F / MathHelper.sqrt_float((float)(i8 * i8 + i9 * i9) + 0.2F);
					this.distanceArray[i8 + 2 + (i9 + 2) * 5] = f10;
				}
			}
		}

		double d44 = 684.412D;
		double d45 = 684.412D;
		this.noise5 = this.noiseGen5.generateNoiseOctaves(this.noise5, i2, i4, i5, i7, 1.121D, 1.121D, 0.5D);
		this.noise6 = this.noiseGen6.generateNoiseOctaves(this.noise6, i2, i4, i5, i7, 200.0D, 200.0D, 0.5D);
		this.noise3 = this.noiseGen3.generateNoiseOctaves(this.noise3, i2, i3, i4, i5, i6, i7, d44 / 80.0D, d45 / 160.0D, d44 / 80.0D);
		this.noise1 = this.noiseGen1.generateNoiseOctaves(this.noise1, i2, i3, i4, i5, i6, i7, d44, d45, d44);
		this.noise2 = this.noiseGen2.generateNoiseOctaves(this.noise2, i2, i3, i4, i5, i6, i7, d44, d45, d44);
		int i12 = 0;
		int i13 = 0;

		for(int i14 = 0; i14 < i5; ++i14) {
			for(int i15 = 0; i15 < i7; ++i15) {
				float maxHeightScaled = 0.0F;
				float minHeightScaled = 0.0F;
				float totalDistance = 0.0F;
				byte b19 = 2;
				BiomeGenBase biomeGenBase20 = this.biomesForGeneration[i14 + 2 + (i15 + 2) * (i5 + 5)];

				for(int i21 = -b19; i21 <= b19; ++i21) {
					for(int i22 = -b19; i22 <= b19; ++i22) {
						BiomeGenBase biomeGenBase23 = this.biomesForGeneration[i14 + i21 + 2 + (i15 + i22 + 2) * (i5 + 5)];
						float distance = this.distanceArray[i21 + 2 + (i22 + 2) * 5] / (biomeGenBase23.minHeight + 2.0F);
						if(biomeGenBase23.minHeight > biomeGenBase20.minHeight) {
							distance /= 2.0F;
						}

						maxHeightScaled += biomeGenBase23.maxHeight * distance;
						minHeightScaled += biomeGenBase23.minHeight * distance;
						totalDistance += distance;
					}
				}

				float avgMaxHeight = maxHeightScaled / totalDistance;
				float avgMinHeight = minHeightScaled / totalDistance;
				
				avgMaxHeight = avgMaxHeight * 0.9F + 0.1F;
				avgMinHeight = (avgMinHeight * 4.0F - 1.0F) / 8.0F;
				
				double d46 = this.noise6[i13] / 8000.0D;
				if(d46 < 0.0D) {
					d46 = -d46 * 0.3D;
				}

				d46 = d46 * 3.0D - 2.0D;
				if(d46 < 0.0D) {
					d46 /= 2.0D;
					if(d46 < -1.0D) {
						d46 = -1.0D;
					}

					d46 /= 1.4D;
					d46 /= 2.0D;
				} else {
					if(d46 > 1.0D) {
						d46 = 1.0D;
					}

					d46 /= 8.0D;
				}

				++i13;

				for(int i47 = 0; i47 < i6; ++i47) {
					double d48 = (double)avgMinHeight;
					double d26 = (double)avgMaxHeight;
					d48 += d46 * 0.2D;
					d48 = d48 * (double)i6 / 16.0D;
					double d28 = (double)i6 / 2.0D + d48 * 4.0D;
					double d30 = 0.0D;
					double d32 = ((double)i47 - d28) * 12.0D * 128.0D / 128.0D / d26;
					if(d32 < 0.0D) {
						d32 *= 4.0D;
					}

					double d34 = this.noise1[i12] / 512.0D;
					double d36 = this.noise2[i12] / 512.0D;
					double d38 = (this.noise3[i12] / 10.0D + 1.0D) / 2.0D;
					if(d38 < 0.0D) {
						d30 = d34;
					} else if(d38 > 1.0D) {
						d30 = d36;
					} else {
						d30 = d34 + (d36 - d34) * d38;
					}

					d30 -= d32;
					if(i47 > i6 - 4) {
						double d40 = (double)((float)(i47 - (i6 - 4)) / 3.0F);
						d30 = d30 * (1.0D - d40) + -10.0D * d40;
					}

					d1[i12] = d30;
					++i12;
				}
			}
		}

		return d1;
	}

	public boolean chunkExists(int i1, int i2) {
		return true;
	}

	public void populate(IChunkProvider iChunkProvider1, int chunkX, int chunkZ) {
		BlockSand.fallInstantly = true;
		int x0 = chunkX * 16;
		int z0 = chunkZ * 16;
		
		BiomeGenBase biomeGenBase6 = this.worldObj.getBiomeGenForCoords(x0 + 16, z0 + 16);
		this.rand.setSeed(this.worldObj.getSeed());
		long j7 = this.rand.nextLong() / 2L * 2L + 1L;
		long j9 = this.rand.nextLong() / 2L * 2L + 1L;
		this.rand.setSeed((long)chunkX * j7 + (long)chunkZ * j9 ^ this.worldObj.getSeed());
		boolean z11 = false;
		boolean hadCustomFeat = false;		
		
		if(this.mapFeaturesEnabled) {
			if (SoftLock.hasReleaseStructures()) {
				this.mineshaftGenerator.generateStructuresInChunk(this.worldObj, this.rand, chunkX, chunkZ);
				z11 = this.villageGenerator.generateStructuresInChunk(this.worldObj, this.rand, chunkX, chunkZ);
				this.strongholdGenerator.generateStructuresInChunk(this.worldObj, this.rand, chunkX, chunkZ);
			}
			
			hadCustomFeat = this.featureProvider.populateFeatures(worldObj, rand, chunkX, chunkZ);		
		}
		
		int i12;
		int i13;
		int i14;
		if(!z11 && this.rand.nextInt(4) == 0) {
			i12 = x0 + this.rand.nextInt(16) + 8;
			i13 = this.rand.nextInt(128);
			i14 = z0 + this.rand.nextInt(16) + 8;
			(new WorldGenLakes(Block.waterStill.blockID)).generate(this.worldObj, this.rand, i12, i13, i14);
		}

		if(!z11 && this.rand.nextInt(8) == 0) {
			i12 = x0 + this.rand.nextInt(16) + 8;
			i13 = this.rand.nextInt(this.rand.nextInt(120) + 8);
			i14 = z0 + this.rand.nextInt(16) + 8;
			if(i13 < 63 || this.rand.nextInt(10) == 0) {
				(new WorldGenLakes(Block.lavaStill.blockID)).generate(this.worldObj, this.rand, i12, i13, i14);
			}
		}

		for(i12 = 0; i12 < 8; ++i12) {
			i13 = x0 + this.rand.nextInt(16) + 8;
			i14 = this.rand.nextInt(128);
			int i15 = z0 + this.rand.nextInt(16) + 8;
			if((new WorldGenDungeons()).generate(this.worldObj, this.rand, i13, i14, i15)) {
				;
			}
		}

		biomeGenBase6.decorate(this.worldObj, this.rand, x0, z0, hadCustomFeat);
		
		SpawnerAnimals.performWorldGenSpawning(this.worldObj, biomeGenBase6, x0 + 8, z0 + 8, 16, 16, this.rand);
		x0 += 8;
		z0 += 8;

		for(i12 = 0; i12 < 16; ++i12) {
			for(i13 = 0; i13 < 16; ++i13) {
				i14 = this.worldObj.getPrecipitationHeight(x0 + i12, z0 + i13);
				if(this.worldObj.isBlockHydratedDirectly(i12 + x0, i14 - 1, i13 + z0)) {
					this.worldObj.setBlockWithNotify(i12 + x0, i14 - 1, i13 + z0, Block.ice.blockID);
				}

				if(this.worldObj.canSnowAt(i12 + x0, i14, i13 + z0)) {
					this.worldObj.setBlockWithNotify(i12 + x0, i14, i13 + z0, Block.snow.blockID);
				}
			}
		}

		BlockSand.fallInstantly = false;
	}

	public boolean saveChunks(boolean z1, IProgressUpdate iProgressUpdate2) {
		return true;
	}

	public boolean unload100OldestChunks() {
		return false;
	}

	public boolean canSave() {
		return true;
	}

	public String makeString() {
		return "RandomLevelSource";
	}

	public List<SpawnListEntry> getPossibleCreatures(EnumCreatureType enumCreatureType1, int i2, int i3, int i4) {
		BiomeGenBase biomeGenBase5 = this.worldObj.getBiomeGenForCoords(i2, i4);
		return biomeGenBase5 == null ? null : biomeGenBase5.getSpawnableList(enumCreatureType1);
	}

	public ChunkPosition findClosestStructure(World world1, String string2, int i3, int i4, int i5) {
		return "Stronghold".equals(string2) && this.strongholdGenerator != null ? this.strongholdGenerator.getNearestInstance(world1, i3, i4, i5) : null;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2025-07-15 23:27:49.463
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2025-07-15 23:27:49.464
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:27:49.485
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.util.List;
import java.util.Random;

import com.mojontwins.minecraft.feature.FeatureProvider;

public class ChunkProviderGenerate implements IChunkProvider {
	protected Random rand;
	protected NoiseGeneratorOctaves noiseGen1;
	protected NoiseGeneratorOctaves noiseGen2;
	protected NoiseGeneratorOctaves noiseGen3;
	protected NoiseGeneratorOctaves noiseGenStone;
	protected NoiseGeneratorOctaves noiseGen5;
	protected NoiseGeneratorOctaves noiseGen6;
	
	protected World worldObj;
	protected final boolean mapFeaturesEnabled;
	
	protected double[] noiseArray;
	protected double[] stoneNoise = new double[256];
	
	protected MapGenBase caveGenerator = new MapGenCaves();
	protected MapGenBase ravineGenerator = new MapGenRavine();
	protected MapGenStronghold strongholdGenerator = new MapGenStronghold();
	protected MapGenVillage villageGenerator = new MapGenVillage(0);
	protected MapGenMineshaft mineshaftGenerator = new MapGenMineshaft();
	
	// Multi-chunk features	
	public FeatureProvider featureProvider;
	
	protected BiomeGenBase[] biomesForGeneration;
	
	double[] noise3;
	double[] noise1;
	double[] noise2;
	double[] noise5;
	double[] noise6;
	float[] distanceArray;
	int[][] unusedArray = new int[32][32];
	protected boolean isOcean;

	public ChunkProviderGenerate(World world1, long j2, boolean z4) {
		this.worldObj = world1;
		this.mapFeaturesEnabled = z4;
		this.rand = new Random(j2);
		this.noiseGen1 = new NoiseGeneratorOctaves(this.rand, 16);
		this.noiseGen2 = new NoiseGeneratorOctaves(this.rand, 16);
		this.noiseGen3 = new NoiseGeneratorOctaves(this.rand, 8);
		this.noiseGenStone = new NoiseGeneratorOctaves(this.rand, 4);
		this.noiseGen5 = new NoiseGeneratorOctaves(this.rand, 10);
		this.noiseGen6 = new NoiseGeneratorOctaves(this.rand, 16);
		
		this.featureProvider = new FeatureProvider(worldObj, this);
	}

	public void generateTerrain(int chunkX, int chunkZ, byte[] blocks) {
		int quadrantSize = 4;
		int seaLevel = 64;
		int cellSize = quadrantSize + 1;
		int columnSize = 17;
		
		double scalingFactor = 0.25D;
		this.isOcean = true;

		// Split in 4x16x4 sections
		for(int xSection = 0; xSection < quadrantSize; ++xSection) {
			for(int zSection = 0; zSection < quadrantSize; ++zSection) {
				
				for(int ySection = 0; ySection < 16; ++ySection) {

					double noiseA = this.noiseArray[((xSection + 0) * cellSize + zSection + 0) * columnSize + ySection + 0];
					double noiseB = this.noiseArray[((xSection + 0) * cellSize + zSection + 1) * columnSize + ySection + 0];
					double noiseC = this.noiseArray[((xSection + 1) * cellSize + zSection + 0) * columnSize + ySection + 0];
					double noiseD = this.noiseArray[((xSection + 1) * cellSize + zSection + 1) * columnSize + ySection + 0];
					double noiseAinc = (this.noiseArray[((xSection + 0) * cellSize + zSection + 0) * columnSize + ySection + 1] - noiseA) * 0.125D;
					double noiseBinc = (this.noiseArray[((xSection + 0) * cellSize + zSection + 1) * columnSize + ySection + 1] - noiseB) * 0.125D;
					double noiseCinc = (this.noiseArray[((xSection + 1) * cellSize + zSection + 0) * columnSize + ySection + 1] - noiseC) * 0.125D;
					double noiseDinc = (this.noiseArray[((xSection + 1) * cellSize + zSection + 1) * columnSize + ySection + 1] - noiseD) * 0.125D;

					for(int y = 0; y < 8; ++y) {						
						double curNoiseA = noiseA;
						double curNoiseB = noiseB;
						double curNoiseAinc = (noiseC - noiseA) * scalingFactor;
						double curNoiseBinc = (noiseD - noiseB) * scalingFactor;

						for(int x = 0; x < 4; ++x) {
							int indexInBlockArray = (x + (xSection << 2)) << 11 | (0 + (zSection << 2)) << 7 | (ySection << 3) + y;
							
							double density = curNoiseA;
							double densityIncrement = (curNoiseB - curNoiseA) * 0.25D;

							int yy = ySection * 8 + y;
							for(int z = 0; z < 4; ++z) {
								
								int blockID = 0;

								// Fill with water with a layer of ice if suitable								
								if(yy < seaLevel) {
									blockID = Block.waterStill.blockID;
								}

								// World density positive: fill with block.
								if(density > 0.0D) {
									blockID = Block.stone.blockID;
								}

								blocks[indexInBlockArray] = (byte)blockID;

								// Next Z
								indexInBlockArray += 128;
								density += densityIncrement;
								
								// Ocean detector
								if(yy == seaLevel - 1) this.isOcean &= (blockID != Block.stone.blockID);
							}

							curNoiseA += curNoiseAinc;
							curNoiseB += curNoiseBinc;
						}

						noiseA += noiseAinc;
						noiseB += noiseBinc;
						noiseC += noiseCinc;
						noiseD += noiseDinc;
					}
				}
			}
		}
	}

	public void replaceBlocksForBiome(int chunkX, int chunkZ, byte[] blocks, byte[] metadata, BiomeGenBase[] biomes) {
		byte seaLevel = 63;
		double d6 = 8.0D / 256D;
		this.stoneNoise = this.noiseGenStone.generateNoiseOctaves(this.stoneNoise, chunkX * 16, chunkZ * 16, 0, 16, 16, 1, d6 * 2.0D, d6 * 2.0D, d6 * 2.0D);

		BiomeGenBase biomeGen;
		
		for(int z = 0; z < 16; ++z) {
			for(int x = 0; x < 16; ++x) {
				biomeGen = biomes[x + z * 16];
				
				biomeGen.replaceBlocksForBiome(this, this.worldObj, this.rand, 
						chunkX, chunkZ, x, z, 
						blocks, metadata, seaLevel, 
						null, null, this.stoneNoise[z + x * 16]);
			}
		}
		
				
				float temperature = biomeGen.getFloatTemperature();
				int height = (int)(this.stoneNoise[z + x * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
				
				int stoneHeight = -1;
				byte topBlock = biomeGen.getTopBlock(this.rand);
				byte fillerBlock = biomeGen.getFillBlock(this.rand);

				for(int y = 127; y >= 0; --y) {
					int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
					if(y <= 0 + this.rand.nextInt(5)) {
						blocks[index] = (byte)Block.bedrock.blockID;
					} else {
						byte blockID = blocks[index];
						if(blockID == 0) {
							stoneHeight = -1;
						} else if(blockID == Block.stone.blockID) {
							if(stoneHeight == -1) {
								if(height <= 0) {
									topBlock = 0;
									fillerBlock = (byte)Block.stone.blockID;
								} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
									topBlock = biomeGen.getTopBlock(this.rand);
									fillerBlock = biomeGen.getFillBlock(this.rand);
								}

								if(y < seaLevel && topBlock == 0) {
									if(temperature < 0.15F) {
										topBlock = (byte)Block.ice.blockID;
									} else {
										topBlock = (byte)Block.waterStill.blockID;
									}
								}

								stoneHeight = height;
								if(y >= seaLevel - 1) {
									blocks[index] = topBlock;
								} else {
									blocks[index] = fillerBlock;
								}
							} else if(stoneHeight > 0) {
								--stoneHeight;
								blocks[index] = fillerBlock;
								if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
									stoneHeight = this.rand.nextInt(4);
									fillerBlock = this.sandstoneGenBlock();
								}
							}
						}
					}
				}
			}
		}

	}

	public Chunk loadChunk(int i1, int i2) {
		return this.provideChunk(i1, i2);
	}
	
	protected byte[] createByteArray() {
		return new byte[32768];
	}

	public Chunk provideChunk(int chunkX, int chunkZ) {
		this.rand.setSeed((long)chunkX * 341873128712L + (long)chunkZ * 132897987541L);

		byte[] blockArray = this.createByteArray();
		byte[] metadataArray = this.createByteArray();
		this.generateTerrain(chunkX, chunkZ, blockArray);

		this.biomesForGeneration = this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration, chunkX * 16, chunkZ * 16, 16, 16);
		
		this.replaceBlocksForBiome(chunkX, chunkZ, blockArray, metadataArray, this.biomesForGeneration);
		
		this.caveGenerator.generate(this, this.worldObj, chunkX, chunkZ, blockArray);
		this.ravineGenerator.generate(this, this.worldObj, chunkX, chunkZ, blockArray);
		
		if(this.mapFeaturesEnabled && SoftLock.hasReleaseStructures()) {
			this.mineshaftGenerator.generate(this, this.worldObj, chunkX, chunkZ, blockArray);
			this.villageGenerator.generate(this, this.worldObj, chunkX, chunkZ, blockArray);
			this.strongholdGenerator.generate(this, this.worldObj, chunkX, chunkZ, blockArray);
		}

		Chunk chunk = new Chunk(this.worldObj, blockArray, chunkX, chunkZ);

		if (this.mapFeaturesEnabled) {
			this.featureProvider.getNearestFeatures(chunkX, chunkZ, chunk);
		} 

		byte[] biomeArray = chunk.getBiomeArray();

		for(int i6 = 0; i6 < biomeArray.length; ++i6) {
			biomeArray[i6] = (byte)this.biomesForGeneration[i6].biomeID;
		}

		chunk.generateSkylightMap();
		return chunk;
	}

	public Chunk justGenerate(int chunkX, int chunkZ) {
		this.rand.setSeed((long)chunkX * 341873128712L + (long)chunkZ * 132897987541L);
		byte[] blockArray = this.createByteArray();
		this.generateTerrain(chunkX, chunkZ, blockArray);
		
		Chunk chunk = new Chunk(this.worldObj, blockArray, chunkX, chunkZ);
		
		return chunk;
	}

	public double[] initializeNoiseField(double[] d1, int i2, int i3, int i4, int i5, int i6, int i7) {
		if(d1 == null) {
			d1 = new double[i5 * i6 * i7];
		}

		if(this.distanceArray == null) {
			this.distanceArray = new float[25];

			for(int i8 = -2; i8 <= 2; ++i8) {
				for(int i9 = -2; i9 <= 2; ++i9) {
					float f10 = 10.0F / MathHelper.sqrt_float((float)(i8 * i8 + i9 * i9) + 0.2F);
					this.distanceArray[i8 + 2 + (i9 + 2) * 5] = f10;
				}
			}
		}

		double d44 = 684.412D;
		double d45 = 684.412D;
		this.noise5 = this.noiseGen5.generateNoiseOctaves(this.noise5, i2, i4, i5, i7, 1.121D, 1.121D, 0.5D);
		this.noise6 = this.noiseGen6.generateNoiseOctaves(this.noise6, i2, i4, i5, i7, 200.0D, 200.0D, 0.5D);
		this.noise3 = this.noiseGen3.generateNoiseOctaves(this.noise3, i2, i3, i4, i5, i6, i7, d44 / 80.0D, d45 / 160.0D, d44 / 80.0D);
		this.noise1 = this.noiseGen1.generateNoiseOctaves(this.noise1, i2, i3, i4, i5, i6, i7, d44, d45, d44);
		this.noise2 = this.noiseGen2.generateNoiseOctaves(this.noise2, i2, i3, i4, i5, i6, i7, d44, d45, d44);
		int i12 = 0;
		int i13 = 0;

		for(int i14 = 0; i14 < i5; ++i14) {
			for(int i15 = 0; i15 < i7; ++i15) {
				float maxHeightScaled = 0.0F;
				float minHeightScaled = 0.0F;
				float totalDistance = 0.0F;
				byte b19 = 2;
				BiomeGenBase biomeGenBase20 = this.biomesForGeneration[i14 + 2 + (i15 + 2) * (i5 + 5)];

				for(int i21 = -b19; i21 <= b19; ++i21) {
					for(int i22 = -b19; i22 <= b19; ++i22) {
						BiomeGenBase biomeGenBase23 = this.biomesForGeneration[i14 + i21 + 2 + (i15 + i22 + 2) * (i5 + 5)];
						float distance = this.distanceArray[i21 + 2 + (i22 + 2) * 5] / (biomeGenBase23.minHeight + 2.0F);
						if(biomeGenBase23.minHeight > biomeGenBase20.minHeight) {
							distance /= 2.0F;
						}

						maxHeightScaled += biomeGenBase23.maxHeight * distance;
						minHeightScaled += biomeGenBase23.minHeight * distance;
						totalDistance += distance;
					}
				}

				float avgMaxHeight = maxHeightScaled / totalDistance;
				float avgMinHeight = minHeightScaled / totalDistance;
				
				avgMaxHeight = avgMaxHeight * 0.9F + 0.1F;
				avgMinHeight = (avgMinHeight * 4.0F - 1.0F) / 8.0F;
				
				double d46 = this.noise6[i13] / 8000.0D;
				if(d46 < 0.0D) {
					d46 = -d46 * 0.3D;
				}

				d46 = d46 * 3.0D - 2.0D;
				if(d46 < 0.0D) {
					d46 /= 2.0D;
					if(d46 < -1.0D) {
						d46 = -1.0D;
					}

					d46 /= 1.4D;
					d46 /= 2.0D;
				} else {
					if(d46 > 1.0D) {
						d46 = 1.0D;
					}

					d46 /= 8.0D;
				}

				++i13;

				for(int i47 = 0; i47 < i6; ++i47) {
					double d48 = (double)avgMinHeight;
					double d26 = (double)avgMaxHeight;
					d48 += d46 * 0.2D;
					d48 = d48 * (double)i6 / 16.0D;
					double d28 = (double)i6 / 2.0D + d48 * 4.0D;
					double d30 = 0.0D;
					double d32 = ((double)i47 - d28) * 12.0D * 128.0D / 128.0D / d26;
					if(d32 < 0.0D) {
						d32 *= 4.0D;
					}

					double d34 = this.noise1[i12] / 512.0D;
					double d36 = this.noise2[i12] / 512.0D;
					double d38 = (this.noise3[i12] / 10.0D + 1.0D) / 2.0D;
					if(d38 < 0.0D) {
						d30 = d34;
					} else if(d38 > 1.0D) {
						d30 = d36;
					} else {
						d30 = d34 + (d36 - d34) * d38;
					}

					d30 -= d32;
					if(i47 > i6 - 4) {
						double d40 = (double)((float)(i47 - (i6 - 4)) / 3.0F);
						d30 = d30 * (1.0D - d40) + -10.0D * d40;
					}

					d1[i12] = d30;
					++i12;
				}
			}
		}

		return d1;
	}

	public boolean chunkExists(int i1, int i2) {
		return true;
	}

	public void populate(IChunkProvider iChunkProvider1, int chunkX, int chunkZ) {
		BlockSand.fallInstantly = true;
		int x0 = chunkX * 16;
		int z0 = chunkZ * 16;
		
		BiomeGenBase biomeGenBase6 = this.worldObj.getBiomeGenForCoords(x0 + 16, z0 + 16);
		this.rand.setSeed(this.worldObj.getSeed());
		long j7 = this.rand.nextLong() / 2L * 2L + 1L;
		long j9 = this.rand.nextLong() / 2L * 2L + 1L;
		this.rand.setSeed((long)chunkX * j7 + (long)chunkZ * j9 ^ this.worldObj.getSeed());
		boolean z11 = false;
		boolean hadCustomFeat = false;		
		
		if(this.mapFeaturesEnabled) {
			if (SoftLock.hasReleaseStructures()) {
				this.mineshaftGenerator.generateStructuresInChunk(this.worldObj, this.rand, chunkX, chunkZ);
				z11 = this.villageGenerator.generateStructuresInChunk(this.worldObj, this.rand, chunkX, chunkZ);
				this.strongholdGenerator.generateStructuresInChunk(this.worldObj, this.rand, chunkX, chunkZ);
			}
			
			hadCustomFeat = this.featureProvider.populateFeatures(worldObj, rand, chunkX, chunkZ);		
		}
		
		int i12;
		int i13;
		int i14;
		if(!z11 && this.rand.nextInt(4) == 0) {
			i12 = x0 + this.rand.nextInt(16) + 8;
			i13 = this.rand.nextInt(128);
			i14 = z0 + this.rand.nextInt(16) + 8;
			(new WorldGenLakes(Block.waterStill.blockID)).generate(this.worldObj, this.rand, i12, i13, i14);
		}

		if(!z11 && this.rand.nextInt(8) == 0) {
			i12 = x0 + this.rand.nextInt(16) + 8;
			i13 = this.rand.nextInt(this.rand.nextInt(120) + 8);
			i14 = z0 + this.rand.nextInt(16) + 8;
			if(i13 < 63 || this.rand.nextInt(10) == 0) {
				(new WorldGenLakes(Block.lavaStill.blockID)).generate(this.worldObj, this.rand, i12, i13, i14);
			}
		}

		for(i12 = 0; i12 < 8; ++i12) {
			i13 = x0 + this.rand.nextInt(16) + 8;
			i14 = this.rand.nextInt(128);
			int i15 = z0 + this.rand.nextInt(16) + 8;
			if((new WorldGenDungeons()).generate(this.worldObj, this.rand, i13, i14, i15)) {
				;
			}
		}

		biomeGenBase6.decorate(this.worldObj, this.rand, x0, z0, hadCustomFeat);
		
		SpawnerAnimals.performWorldGenSpawning(this.worldObj, biomeGenBase6, x0 + 8, z0 + 8, 16, 16, this.rand);
		x0 += 8;
		z0 += 8;

		for(i12 = 0; i12 < 16; ++i12) {
			for(i13 = 0; i13 < 16; ++i13) {
				i14 = this.worldObj.getPrecipitationHeight(x0 + i12, z0 + i13);
				if(this.worldObj.isBlockHydratedDirectly(i12 + x0, i14 - 1, i13 + z0)) {
					this.worldObj.setBlockWithNotify(i12 + x0, i14 - 1, i13 + z0, Block.ice.blockID);
				}

				if(this.worldObj.canSnowAt(i12 + x0, i14, i13 + z0)) {
					this.worldObj.setBlockWithNotify(i12 + x0, i14, i13 + z0, Block.snow.blockID);
				}
			}
		}

		BlockSand.fallInstantly = false;
	}

	public boolean saveChunks(boolean z1, IProgressUpdate iProgressUpdate2) {
		return true;
	}

	public boolean unload100OldestChunks() {
		return false;
	}

	public boolean canSave() {
		return true;
	}

	public String makeString() {
		return "RandomLevelSource";
	}

	public List<SpawnListEntry> getPossibleCreatures(EnumCreatureType enumCreatureType1, int i2, int i3, int i4) {
		BiomeGenBase biomeGenBase5 = this.worldObj.getBiomeGenForCoords(i2, i4);
		return biomeGenBase5 == null ? null : biomeGenBase5.getSpawnableList(enumCreatureType1);
	}

	public ChunkPosition findClosestStructure(World world1, String string2, int i3, int i4, int i5) {
		return "Stronghold".equals(string2) && this.strongholdGenerator != null ? this.strongholdGenerator.getNearestInstance(world1, i3, i4, i5) : null;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:27:49.485
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:27:49.486
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:27:50.973
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.util.List;
import java.util.Random;

import com.mojontwins.minecraft.feature.FeatureProvider;

public class ChunkProviderGenerate implements IChunkProvider {
	protected Random rand;
	protected NoiseGeneratorOctaves noiseGen1;
	protected NoiseGeneratorOctaves noiseGen2;
	protected NoiseGeneratorOctaves noiseGen3;
	protected NoiseGeneratorOctaves noiseGenStone;
	protected NoiseGeneratorOctaves noiseGen5;
	protected NoiseGeneratorOctaves noiseGen6;
	
	protected World worldObj;
	protected final boolean mapFeaturesEnabled;
	
	protected double[] noiseArray;
	protected double[] stoneNoise = new double[256];
	
	protected MapGenBase caveGenerator = new MapGenCaves();
	protected MapGenBase ravineGenerator = new MapGenRavine();
	protected MapGenStronghold strongholdGenerator = new MapGenStronghold();
	protected MapGenVillage villageGenerator = new MapGenVillage(0);
	protected MapGenMineshaft mineshaftGenerator = new MapGenMineshaft();
	
	// Multi-chunk features	
	public FeatureProvider featureProvider;
	
	protected BiomeGenBase[] biomesForGeneration;
	
	double[] noise3;
	double[] noise1;
	double[] noise2;
	double[] noise5;
	double[] noise6;
	float[] distanceArray;
	int[][] unusedArray = new int[32][32];
	protected boolean isOcean;

	public ChunkProviderGenerate(World world1, long j2, boolean z4) {
		this.worldObj = world1;
		this.mapFeaturesEnabled = z4;
		this.rand = new Random(j2);
		this.noiseGen1 = new NoiseGeneratorOctaves(this.rand, 16);
		this.noiseGen2 = new NoiseGeneratorOctaves(this.rand, 16);
		this.noiseGen3 = new NoiseGeneratorOctaves(this.rand, 8);
		this.noiseGenStone = new NoiseGeneratorOctaves(this.rand, 4);
		this.noiseGen5 = new NoiseGeneratorOctaves(this.rand, 10);
		this.noiseGen6 = new NoiseGeneratorOctaves(this.rand, 16);
		
		this.featureProvider = new FeatureProvider(worldObj, this);
	}

	public void generateTerrain(int chunkX, int chunkZ, byte[] blocks) {
		int quadrantSize = 4;
		int seaLevel = 64;
		int cellSize = quadrantSize + 1;
		int columnSize = 17;
		
		double scalingFactor = 0.25D;
		this.isOcean = true;

		// Split in 4x16x4 sections
		for(int xSection = 0; xSection < quadrantSize; ++xSection) {
			for(int zSection = 0; zSection < quadrantSize; ++zSection) {
				
				for(int ySection = 0; ySection < 16; ++ySection) {

					double noiseA = this.noiseArray[((xSection + 0) * cellSize + zSection + 0) * columnSize + ySection + 0];
					double noiseB = this.noiseArray[((xSection + 0) * cellSize + zSection + 1) * columnSize + ySection + 0];
					double noiseC = this.noiseArray[((xSection + 1) * cellSize + zSection + 0) * columnSize + ySection + 0];
					double noiseD = this.noiseArray[((xSection + 1) * cellSize + zSection + 1) * columnSize + ySection + 0];
					double noiseAinc = (this.noiseArray[((xSection + 0) * cellSize + zSection + 0) * columnSize + ySection + 1] - noiseA) * 0.125D;
					double noiseBinc = (this.noiseArray[((xSection + 0) * cellSize + zSection + 1) * columnSize + ySection + 1] - noiseB) * 0.125D;
					double noiseCinc = (this.noiseArray[((xSection + 1) * cellSize + zSection + 0) * columnSize + ySection + 1] - noiseC) * 0.125D;
					double noiseDinc = (this.noiseArray[((xSection + 1) * cellSize + zSection + 1) * columnSize + ySection + 1] - noiseD) * 0.125D;

					for(int y = 0; y < 8; ++y) {						
						double curNoiseA = noiseA;
						double curNoiseB = noiseB;
						double curNoiseAinc = (noiseC - noiseA) * scalingFactor;
						double curNoiseBinc = (noiseD - noiseB) * scalingFactor;

						for(int x = 0; x < 4; ++x) {
							int indexInBlockArray = (x + (xSection << 2)) << 11 | (0 + (zSection << 2)) << 7 | (ySection << 3) + y;
							
							double density = curNoiseA;
							double densityIncrement = (curNoiseB - curNoiseA) * 0.25D;

							int yy = ySection * 8 + y;
							for(int z = 0; z < 4; ++z) {
								
								int blockID = 0;

								// Fill with water with a layer of ice if suitable								
								if(yy < seaLevel) {
									blockID = Block.waterStill.blockID;
								}

								// World density positive: fill with block.
								if(density > 0.0D) {
									blockID = Block.stone.blockID;
								}

								blocks[indexInBlockArray] = (byte)blockID;

								// Next Z
								indexInBlockArray += 128;
								density += densityIncrement;
								
								// Ocean detector
								if(yy == seaLevel - 1) this.isOcean &= (blockID != Block.stone.blockID);
							}

							curNoiseA += curNoiseAinc;
							curNoiseB += curNoiseBinc;
						}

						noiseA += noiseAinc;
						noiseB += noiseBinc;
						noiseC += noiseCinc;
						noiseD += noiseDinc;
					}
				}
			}
		}
	}

	public void replaceBlocksForBiome(int chunkX, int chunkZ, byte[] blocks, byte[] metadata, BiomeGenBase[] biomes) {
		byte seaLevel = 63;
		double d6 = 8.0D / 256D;
		this.stoneNoise = this.noiseGenStone.generateNoiseOctaves(this.stoneNoise, chunkX * 16, chunkZ * 16, 0, 16, 16, 1, d6 * 2.0D, d6 * 2.0D, d6 * 2.0D);

		BiomeGenBase biomeGen;
		
		for(int z = 0; z < 16; ++z) {
			for(int x = 0; x < 16; ++x) {
				biomeGen = biomes[x + z * 16];
				
				biomeGen.replaceBlocksForBiome(this, this.worldObj, this.rand, 
						chunkX, chunkZ, x, z, 
						blocks, metadata, seaLevel, 
						null, null, this.stoneNoise[z + x * 16]);
			}
		}
	}
				
				float temperature = biomeGen.getFloatTemperature();
				int height = (int)(this.stoneNoise[z + x * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
				
				int stoneHeight = -1;
				byte topBlock = biomeGen.getTopBlock(this.rand);
				byte fillerBlock = biomeGen.getFillBlock(this.rand);

				for(int y = 127; y >= 0; --y) {
					int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
					if(y <= 0 + this.rand.nextInt(5)) {
						blocks[index] = (byte)Block.bedrock.blockID;
					} else {
						byte blockID = blocks[index];
						if(blockID == 0) {
							stoneHeight = -1;
						} else if(blockID == Block.stone.blockID) {
							if(stoneHeight == -1) {
								if(height <= 0) {
									topBlock = 0;
									fillerBlock = (byte)Block.stone.blockID;
								} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
									topBlock = biomeGen.getTopBlock(this.rand);
									fillerBlock = biomeGen.getFillBlock(this.rand);
								}

								if(y < seaLevel && topBlock == 0) {
									if(temperature < 0.15F) {
										topBlock = (byte)Block.ice.blockID;
									} else {
										topBlock = (byte)Block.waterStill.blockID;
									}
								}

								stoneHeight = height;
								if(y >= seaLevel - 1) {
									blocks[index] = topBlock;
								} else {
									blocks[index] = fillerBlock;
								}
							} else if(stoneHeight > 0) {
								--stoneHeight;
								blocks[index] = fillerBlock;
								if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
									stoneHeight = this.rand.nextInt(4);
									fillerBlock = this.sandstoneGenBlock();
								}
							}
						}
					}
				}
			}
		}

	}

	public Chunk loadChunk(int i1, int i2) {
		return this.provideChunk(i1, i2);
	}
	
	protected byte[] createByteArray() {
		return new byte[32768];
	}

	public Chunk provideChunk(int chunkX, int chunkZ) {
		this.rand.setSeed((long)chunkX * 341873128712L + (long)chunkZ * 132897987541L);

		byte[] blockArray = this.createByteArray();
		byte[] metadataArray = this.createByteArray();
		this.generateTerrain(chunkX, chunkZ, blockArray);

		this.biomesForGeneration = this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration, chunkX * 16, chunkZ * 16, 16, 16);
		
		this.replaceBlocksForBiome(chunkX, chunkZ, blockArray, metadataArray, this.biomesForGeneration);
		
		this.caveGenerator.generate(this, this.worldObj, chunkX, chunkZ, blockArray);
		this.ravineGenerator.generate(this, this.worldObj, chunkX, chunkZ, blockArray);
		
		if(this.mapFeaturesEnabled && SoftLock.hasReleaseStructures()) {
			this.mineshaftGenerator.generate(this, this.worldObj, chunkX, chunkZ, blockArray);
			this.villageGenerator.generate(this, this.worldObj, chunkX, chunkZ, blockArray);
			this.strongholdGenerator.generate(this, this.worldObj, chunkX, chunkZ, blockArray);
		}

		Chunk chunk = new Chunk(this.worldObj, blockArray, chunkX, chunkZ);

		if (this.mapFeaturesEnabled) {
			this.featureProvider.getNearestFeatures(chunkX, chunkZ, chunk);
		} 

		byte[] biomeArray = chunk.getBiomeArray();

		for(int i6 = 0; i6 < biomeArray.length; ++i6) {
			biomeArray[i6] = (byte)this.biomesForGeneration[i6].biomeID;
		}

		chunk.generateSkylightMap();
		return chunk;
	}

	public Chunk justGenerate(int chunkX, int chunkZ) {
		this.rand.setSeed((long)chunkX * 341873128712L + (long)chunkZ * 132897987541L);
		byte[] blockArray = this.createByteArray();
		this.generateTerrain(chunkX, chunkZ, blockArray);
		
		Chunk chunk = new Chunk(this.worldObj, blockArray, chunkX, chunkZ);
		
		return chunk;
	}

	public double[] initializeNoiseField(double[] d1, int i2, int i3, int i4, int i5, int i6, int i7) {
		if(d1 == null) {
			d1 = new double[i5 * i6 * i7];
		}

		if(this.distanceArray == null) {
			this.distanceArray = new float[25];

			for(int i8 = -2; i8 <= 2; ++i8) {
				for(int i9 = -2; i9 <= 2; ++i9) {
					float f10 = 10.0F / MathHelper.sqrt_float((float)(i8 * i8 + i9 * i9) + 0.2F);
					this.distanceArray[i8 + 2 + (i9 + 2) * 5] = f10;
				}
			}
		}

		double d44 = 684.412D;
		double d45 = 684.412D;
		this.noise5 = this.noiseGen5.generateNoiseOctaves(this.noise5, i2, i4, i5, i7, 1.121D, 1.121D, 0.5D);
		this.noise6 = this.noiseGen6.generateNoiseOctaves(this.noise6, i2, i4, i5, i7, 200.0D, 200.0D, 0.5D);
		this.noise3 = this.noiseGen3.generateNoiseOctaves(this.noise3, i2, i3, i4, i5, i6, i7, d44 / 80.0D, d45 / 160.0D, d44 / 80.0D);
		this.noise1 = this.noiseGen1.generateNoiseOctaves(this.noise1, i2, i3, i4, i5, i6, i7, d44, d45, d44);
		this.noise2 = this.noiseGen2.generateNoiseOctaves(this.noise2, i2, i3, i4, i5, i6, i7, d44, d45, d44);
		int i12 = 0;
		int i13 = 0;

		for(int i14 = 0; i14 < i5; ++i14) {
			for(int i15 = 0; i15 < i7; ++i15) {
				float maxHeightScaled = 0.0F;
				float minHeightScaled = 0.0F;
				float totalDistance = 0.0F;
				byte b19 = 2;
				BiomeGenBase biomeGenBase20 = this.biomesForGeneration[i14 + 2 + (i15 + 2) * (i5 + 5)];

				for(int i21 = -b19; i21 <= b19; ++i21) {
					for(int i22 = -b19; i22 <= b19; ++i22) {
						BiomeGenBase biomeGenBase23 = this.biomesForGeneration[i14 + i21 + 2 + (i15 + i22 + 2) * (i5 + 5)];
						float distance = this.distanceArray[i21 + 2 + (i22 + 2) * 5] / (biomeGenBase23.minHeight + 2.0F);
						if(biomeGenBase23.minHeight > biomeGenBase20.minHeight) {
							distance /= 2.0F;
						}

						maxHeightScaled += biomeGenBase23.maxHeight * distance;
						minHeightScaled += biomeGenBase23.minHeight * distance;
						totalDistance += distance;
					}
				}

				float avgMaxHeight = maxHeightScaled / totalDistance;
				float avgMinHeight = minHeightScaled / totalDistance;
				
				avgMaxHeight = avgMaxHeight * 0.9F + 0.1F;
				avgMinHeight = (avgMinHeight * 4.0F - 1.0F) / 8.0F;
				
				double d46 = this.noise6[i13] / 8000.0D;
				if(d46 < 0.0D) {
					d46 = -d46 * 0.3D;
				}

				d46 = d46 * 3.0D - 2.0D;
				if(d46 < 0.0D) {
					d46 /= 2.0D;
					if(d46 < -1.0D) {
						d46 = -1.0D;
					}

					d46 /= 1.4D;
					d46 /= 2.0D;
				} else {
					if(d46 > 1.0D) {
						d46 = 1.0D;
					}

					d46 /= 8.0D;
				}

				++i13;

				for(int i47 = 0; i47 < i6; ++i47) {
					double d48 = (double)avgMinHeight;
					double d26 = (double)avgMaxHeight;
					d48 += d46 * 0.2D;
					d48 = d48 * (double)i6 / 16.0D;
					double d28 = (double)i6 / 2.0D + d48 * 4.0D;
					double d30 = 0.0D;
					double d32 = ((double)i47 - d28) * 12.0D * 128.0D / 128.0D / d26;
					if(d32 < 0.0D) {
						d32 *= 4.0D;
					}

					double d34 = this.noise1[i12] / 512.0D;
					double d36 = this.noise2[i12] / 512.0D;
					double d38 = (this.noise3[i12] / 10.0D + 1.0D) / 2.0D;
					if(d38 < 0.0D) {
						d30 = d34;
					} else if(d38 > 1.0D) {
						d30 = d36;
					} else {
						d30 = d34 + (d36 - d34) * d38;
					}

					d30 -= d32;
					if(i47 > i6 - 4) {
						double d40 = (double)((float)(i47 - (i6 - 4)) / 3.0F);
						d30 = d30 * (1.0D - d40) + -10.0D * d40;
					}

					d1[i12] = d30;
					++i12;
				}
			}
		}

		return d1;
	}

	public boolean chunkExists(int i1, int i2) {
		return true;
	}

	public void populate(IChunkProvider iChunkProvider1, int chunkX, int chunkZ) {
		BlockSand.fallInstantly = true;
		int x0 = chunkX * 16;
		int z0 = chunkZ * 16;
		
		BiomeGenBase biomeGenBase6 = this.worldObj.getBiomeGenForCoords(x0 + 16, z0 + 16);
		this.rand.setSeed(this.worldObj.getSeed());
		long j7 = this.rand.nextLong() / 2L * 2L + 1L;
		long j9 = this.rand.nextLong() / 2L * 2L + 1L;
		this.rand.setSeed((long)chunkX * j7 + (long)chunkZ * j9 ^ this.worldObj.getSeed());
		boolean z11 = false;
		boolean hadCustomFeat = false;		
		
		if(this.mapFeaturesEnabled) {
			if (SoftLock.hasReleaseStructures()) {
				this.mineshaftGenerator.generateStructuresInChunk(this.worldObj, this.rand, chunkX, chunkZ);
				z11 = this.villageGenerator.generateStructuresInChunk(this.worldObj, this.rand, chunkX, chunkZ);
				this.strongholdGenerator.generateStructuresInChunk(this.worldObj, this.rand, chunkX, chunkZ);
			}
			
			hadCustomFeat = this.featureProvider.populateFeatures(worldObj, rand, chunkX, chunkZ);		
		}
		
		int i12;
		int i13;
		int i14;
		if(!z11 && this.rand.nextInt(4) == 0) {
			i12 = x0 + this.rand.nextInt(16) + 8;
			i13 = this.rand.nextInt(128);
			i14 = z0 + this.rand.nextInt(16) + 8;
			(new WorldGenLakes(Block.waterStill.blockID)).generate(this.worldObj, this.rand, i12, i13, i14);
		}

		if(!z11 && this.rand.nextInt(8) == 0) {
			i12 = x0 + this.rand.nextInt(16) + 8;
			i13 = this.rand.nextInt(this.rand.nextInt(120) + 8);
			i14 = z0 + this.rand.nextInt(16) + 8;
			if(i13 < 63 || this.rand.nextInt(10) == 0) {
				(new WorldGenLakes(Block.lavaStill.blockID)).generate(this.worldObj, this.rand, i12, i13, i14);
			}
		}

		for(i12 = 0; i12 < 8; ++i12) {
			i13 = x0 + this.rand.nextInt(16) + 8;
			i14 = this.rand.nextInt(128);
			int i15 = z0 + this.rand.nextInt(16) + 8;
			if((new WorldGenDungeons()).generate(this.worldObj, this.rand, i13, i14, i15)) {
				;
			}
		}

		biomeGenBase6.decorate(this.worldObj, this.rand, x0, z0, hadCustomFeat);
		
		SpawnerAnimals.performWorldGenSpawning(this.worldObj, biomeGenBase6, x0 + 8, z0 + 8, 16, 16, this.rand);
		x0 += 8;
		z0 += 8;

		for(i12 = 0; i12 < 16; ++i12) {
			for(i13 = 0; i13 < 16; ++i13) {
				i14 = this.worldObj.getPrecipitationHeight(x0 + i12, z0 + i13);
				if(this.worldObj.isBlockHydratedDirectly(i12 + x0, i14 - 1, i13 + z0)) {
					this.worldObj.setBlockWithNotify(i12 + x0, i14 - 1, i13 + z0, Block.ice.blockID);
				}

				if(this.worldObj.canSnowAt(i12 + x0, i14, i13 + z0)) {
					this.worldObj.setBlockWithNotify(i12 + x0, i14, i13 + z0, Block.snow.blockID);
				}
			}
		}

		BlockSand.fallInstantly = false;
	}

	public boolean saveChunks(boolean z1, IProgressUpdate iProgressUpdate2) {
		return true;
	}

	public boolean unload100OldestChunks() {
		return false;
	}

	public boolean canSave() {
		return true;
	}

	public String makeString() {
		return "RandomLevelSource";
	}

	public List<SpawnListEntry> getPossibleCreatures(EnumCreatureType enumCreatureType1, int i2, int i3, int i4) {
		BiomeGenBase biomeGenBase5 = this.worldObj.getBiomeGenForCoords(i2, i4);
		return biomeGenBase5 == null ? null : biomeGenBase5.getSpawnableList(enumCreatureType1);
	}

	public ChunkPosition findClosestStructure(World world1, String string2, int i3, int i4, int i5) {
		return "Stronghold".equals(string2) && this.strongholdGenerator != null ? this.strongholdGenerator.getNearestInstance(world1, i3, i4, i5) : null;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:526)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:201)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2025-07-15 23:27:50.973
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:526)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:201)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2025-07-15 23:27:50.974
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:526)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:201)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:28:16.614
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.util.List;
import java.util.Random;

import com.mojontwins.minecraft.feature.FeatureProvider;

public class ChunkProviderGenerate implements IChunkProvider {
	protected Random rand;
	protected NoiseGeneratorOctaves noiseGen1;
	protected NoiseGeneratorOctaves noiseGen2;
	protected NoiseGeneratorOctaves noiseGen3;
	protected NoiseGeneratorOctaves noiseGenStone;
	protected NoiseGeneratorOctaves noiseGen5;
	protected NoiseGeneratorOctaves noiseGen6;
	
	protected World worldObj;
	protected final boolean mapFeaturesEnabled;
	
	protected double[] noiseArray;
	protected double[] stoneNoise = new double[256];
	
	protected MapGenBase caveGenerator = new MapGenCaves();
	protected MapGenBase ravineGenerator = new MapGenRavine();
	protected MapGenStronghold strongholdGenerator = new MapGenStronghold();
	protected MapGenVillage villageGenerator = new MapGenVillage(0);
	protected MapGenMineshaft mineshaftGenerator = new MapGenMineshaft();
	
	// Multi-chunk features	
	public FeatureProvider featureProvider;
	
	protected BiomeGenBase[] biomesForGeneration;
	
	double[] noise3;
	double[] noise1;
	double[] noise2;
	double[] noise5;
	double[] noise6;
	float[] distanceArray;
	int[][] unusedArray = new int[32][32];
	protected boolean isOcean;

	public ChunkProviderGenerate(World world1, long j2, boolean z4) {
		this.worldObj = world1;
		this.mapFeaturesEnabled = z4;
		this.rand = new Random(j2);
		this.noiseGen1 = new NoiseGeneratorOctaves(this.rand, 16);
		this.noiseGen2 = new NoiseGeneratorOctaves(this.rand, 16);
		this.noiseGen3 = new NoiseGeneratorOctaves(this.rand, 8);
		this.noiseGenStone = new NoiseGeneratorOctaves(this.rand, 4);
		this.noiseGen5 = new NoiseGeneratorOctaves(this.rand, 10);
		this.noiseGen6 = new NoiseGeneratorOctaves(this.rand, 16);
		
		this.featureProvider = new FeatureProvider(worldObj, this);
	}

	public void generateTerrain(int chunkX, int chunkZ, byte[] blocks) {
		int quadrantSize = 4;
		int seaLevel = 64;
		int cellSize = quadrantSize + 1;
		int columnSize = 17;
		
		double scalingFactor = 0.25D;
		this.isOcean = true;

		// Split in 4x16x4 sections
		for(int xSection = 0; xSection < quadrantSize; ++xSection) {
			for(int zSection = 0; zSection < quadrantSize; ++zSection) {
				
				for(int ySection = 0; ySection < 16; ++ySection) {

					double noiseA = this.noiseArray[((xSection + 0) * cellSize + zSection + 0) * columnSize + ySection + 0];
					double noiseB = this.noiseArray[((xSection + 0) * cellSize + zSection + 1) * columnSize + ySection + 0];
					double noiseC = this.noiseArray[((xSection + 1) * cellSize + zSection + 0) * columnSize + ySection + 0];
					double noiseD = this.noiseArray[((xSection + 1) * cellSize + zSection + 1) * columnSize + ySection + 0];
					double noiseAinc = (this.noiseArray[((xSection + 0) * cellSize + zSection + 0) * columnSize + ySection + 1] - noiseA) * 0.125D;
					double noiseBinc = (this.noiseArray[((xSection + 0) * cellSize + zSection + 1) * columnSize + ySection + 1] - noiseB) * 0.125D;
					double noiseCinc = (this.noiseArray[((xSection + 1) * cellSize + zSection + 0) * columnSize + ySection + 1] - noiseC) * 0.125D;
					double noiseDinc = (this.noiseArray[((xSection + 1) * cellSize + zSection + 1) * columnSize + ySection + 1] - noiseD) * 0.125D;

					for(int y = 0; y < 8; ++y) {						
						double curNoiseA = noiseA;
						double curNoiseB = noiseB;
						double curNoiseAinc = (noiseC - noiseA) * scalingFactor;
						double curNoiseBinc = (noiseD - noiseB) * scalingFactor;

						for(int x = 0; x < 4; ++x) {
							int indexInBlockArray = (x + (xSection << 2)) << 11 | (0 + (zSection << 2)) << 7 | (ySection << 3) + y;
							
							double density = curNoiseA;
							double densityIncrement = (curNoiseB - curNoiseA) * 0.25D;

							int yy = ySection * 8 + y;
							for(int z = 0; z < 4; ++z) {
								
								int blockID = 0;

								// Fill with water with a layer of ice if suitable								
								if(yy < seaLevel) {
									blockID = Block.waterStill.blockID;
								}

								// World density positive: fill with block.
								if(density > 0.0D) {
									blockID = Block.stone.blockID;
								}

								blocks[indexInBlockArray] = (byte)blockID;

								// Next Z
								indexInBlockArray += 128;
								density += densityIncrement;
								
								// Ocean detector
								if(yy == seaLevel - 1) this.isOcean &= (blockID != Block.stone.blockID);
							}

							curNoiseA += curNoiseAinc;
							curNoiseB += curNoiseBinc;
						}

						noiseA += noiseAinc;
						noiseB += noiseBinc;
						noiseC += noiseCinc;
						noiseD += noiseDinc;
					}
				}
			}
		}
	}

	public void replaceBlocksForBiome(int chunkX, int chunkZ, byte[] blocks, byte[] metadata, BiomeGenBase[] biomes) {
		byte seaLevel = 63;
		double d6 = 8.0D / 256D;
		this.stoneNoise = this.noiseGenStone.generateNoiseOctaves(this.stoneNoise, chunkX * 16, chunkZ * 16, 0, 16, 16, 1, d6 * 2.0D, d6 * 2.0D, d6 * 2.0D);

		BiomeGenBase biomeGen;
		
		for(int z = 0; z < 16; ++z) {
			for(int x = 0; x < 16; ++x) {
				biomeGen = biomes[x + z * 16];
				
				biomeGen.replaceBlocksForBiome(this, this.worldObj, this.rand, 
						chunkX, chunkZ, x, z, 
						blocks, metadata, seaLevel, 
						null, null, this.stoneNoise[z + x * 16]);
			}
		}
	}
				
				float temperature = biomeGen.getFloatTemperature();
				int height = (int)(this.stoneNoise[z + x * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
				
				int stoneHeight = -1;
				byte topBlock = biomeGen.getTopBlock(this.rand);
				byte fillerBlock = biomeGen.getFillBlock(this.rand);

				for(int y = 127; y >= 0; --y) {
					int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
					if(y <= 0 + this.rand.nextInt(5)) {
						blocks[index] = (byte)Block.bedrock.blockID;
					} else {
						byte blockID = blocks[index];
						if(blockID == 0) {
							stoneHeight = -1;
						} else if(blockID == Block.stone.blockID) {
							if(stoneHeight == -1) {
								if(height <= 0) {
									topBlock = 0;
									fillerBlock = (byte)Block.stone.blockID;
								} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
									topBlock = biomeGen.getTopBlock(this.rand);
									fillerBlock = biomeGen.getFillBlock(this.rand);
								}

								if(y < seaLevel && topBlock == 0) {
									if(temperature < 0.15F) {
										topBlock = (byte)Block.ice.blockID;
									} else {
										topBlock = (byte)Block.waterStill.blockID;
									}
								}

								stoneHeight = height;
								if(y >= seaLevel - 1) {
									blocks[index] = topBlock;
								} else {
									blocks[index] = fillerBlock;
								}
							} else if(stoneHeight > 0) {
								--stoneHeight;
								blocks[index] = fillerBlock;
								if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
									stoneHeight = this.rand.nextInt(4);
									fillerBlock = this.sandstoneGenBlock();
								}
							}
						}
					}
				}
			}
		}

	}

	public Chunk loadChunk(int i1, int i2) {
		return this.provideChunk(i1, i2);
	}
	
	protected byte[] createByteArray() {
		return new byte[32768];
	}

	public Chunk provideChunk(int chunkX, int chunkZ) {
		this.rand.setSeed((long)chunkX * 341873128712L + (long)chunkZ * 132897987541L);

		byte[] blockArray = this.createByteArray();
		byte[] metadataArray = this.createByteArray();
		this.generateTerrain(chunkX, chunkZ, blockArray);

		this.biomesForGeneration = this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration, chunkX * 16, chunkZ * 16, 16, 16);
		
		this.replaceBlocksForBiome(chunkX, chunkZ, blockArray, metadataArray, this.biomesForGeneration);
		
		this.caveGenerator.generate(this, this.worldObj, chunkX, chunkZ, blockArray);
		this.ravineGenerator.generate(this, this.worldObj, chunkX, chunkZ, blockArray);
		
		if(this.mapFeaturesEnabled && SoftLock.hasReleaseStructures()) {
			this.mineshaftGenerator.generate(this, this.worldObj, chunkX, chunkZ, blockArray);
			this.villageGenerator.generate(this, this.worldObj, chunkX, chunkZ, blockArray);
			this.strongholdGenerator.generate(this, this.worldObj, chunkX, chunkZ, blockArray);
		}

		Chunk chunk = new Chunk(this.worldObj, blockArray, chunkX, chunkZ);

		if (this.mapFeaturesEnabled) {
			this.featureProvider.getNearestFeatures(chunkX, chunkZ, chunk);
		} 

		byte[] biomeArray = chunk.getBiomeArray();

		for(int i6 = 0; i6 < biomeArray.length; ++i6) {
			biomeArray[i6] = (byte)this.biomesForGeneration[i6].biomeID;
		}

		chunk.generateSkylightMap();
		return chunk;
	}

	public Chunk justGenerate(int chunkX, int chunkZ) {
		this.rand.setSeed((long)chunkX * 341873128712L + (long)chunkZ * 132897987541L);
		byte[] blockArray = this.createByteArray();
		this.generateTerrain(chunkX, chunkZ, blockArray);
		
		Chunk chunk = new Chunk(this.worldObj, blockArray, chunkX, chunkZ);
		
		return chunk;
	}

	public double[] initializeNoiseField(double[] d1, int i2, int i3, int i4, int i5, int i6, int i7) {
		if(d1 == null) {
			d1 = new double[i5 * i6 * i7];
		}

		if(this.distanceArray == null) {
			this.distanceArray = new float[25];

			for(int i8 = -2; i8 <= 2; ++i8) {
				for(int i9 = -2; i9 <= 2; ++i9) {
					float f10 = 10.0F / MathHelper.sqrt_float((float)(i8 * i8 + i9 * i9) + 0.2F);
					this.distanceArray[i8 + 2 + (i9 + 2) * 5] = f10;
				}
			}
		}

		double d44 = 684.412D;
		double d45 = 684.412D;
		this.noise5 = this.noiseGen5.generateNoiseOctaves(this.noise5, i2, i4, i5, i7, 1.121D, 1.121D, 0.5D);
		this.noise6 = this.noiseGen6.generateNoiseOctaves(this.noise6, i2, i4, i5, i7, 200.0D, 200.0D, 0.5D);
		this.noise3 = this.noiseGen3.generateNoiseOctaves(this.noise3, i2, i3, i4, i5, i6, i7, d44 / 80.0D, d45 / 160.0D, d44 / 80.0D);
		this.noise1 = this.noiseGen1.generateNoiseOctaves(this.noise1, i2, i3, i4, i5, i6, i7, d44, d45, d44);
		this.noise2 = this.noiseGen2.generateNoiseOctaves(this.noise2, i2, i3, i4, i5, i6, i7, d44, d45, d44);
		int i12 = 0;
		int i13 = 0;

		for(int i14 = 0; i14 < i5; ++i14) {
			for(int i15 = 0; i15 < i7; ++i15) {
				float maxHeightScaled = 0.0F;
				float minHeightScaled = 0.0F;
				float totalDistance = 0.0F;
				byte b19 = 2;
				BiomeGenBase biomeGenBase20 = this.biomesForGeneration[i14 + 2 + (i15 + 2) * (i5 + 5)];

				for(int i21 = -b19; i21 <= b19; ++i21) {
					for(int i22 = -b19; i22 <= b19; ++i22) {
						BiomeGenBase biomeGenBase23 = this.biomesForGeneration[i14 + i21 + 2 + (i15 + i22 + 2) * (i5 + 5)];
						float distance = this.distanceArray[i21 + 2 + (i22 + 2) * 5] / (biomeGenBase23.minHeight + 2.0F);
						if(biomeGenBase23.minHeight > biomeGenBase20.minHeight) {
							distance /= 2.0F;
						}

						maxHeightScaled += biomeGenBase23.maxHeight * distance;
						minHeightScaled += biomeGenBase23.minHeight * distance;
						totalDistance += distance;
					}
				}

				float avgMaxHeight = maxHeightScaled / totalDistance;
				float avgMinHeight = minHeightScaled / totalDistance;
				
				avgMaxHeight = avgMaxHeight * 0.9F + 0.1F;
				avgMinHeight = (avgMinHeight * 4.0F - 1.0F) / 8.0F;
				
				double d46 = this.noise6[i13] / 8000.0D;
				if(d46 < 0.0D) {
					d46 = -d46 * 0.3D;
				}

				d46 = d46 * 3.0D - 2.0D;
				if(d46 < 0.0D) {
					d46 /= 2.0D;
					if(d46 < -1.0D) {
						d46 = -1.0D;
					}

					d46 /= 1.4D;
					d46 /= 2.0D;
				} else {
					if(d46 > 1.0D) {
						d46 = 1.0D;
					}

					d46 /= 8.0D;
				}

				++i13;

				for(int i47 = 0; i47 < i6; ++i47) {
					double d48 = (double)avgMinHeight;
					double d26 = (double)avgMaxHeight;
					d48 += d46 * 0.2D;
					d48 = d48 * (double)i6 / 16.0D;
					double d28 = (double)i6 / 2.0D + d48 * 4.0D;
					double d30 = 0.0D;
					double d32 = ((double)i47 - d28) * 12.0D * 128.0D / 128.0D / d26;
					if(d32 < 0.0D) {
						d32 *= 4.0D;
					}

					double d34 = this.noise1[i12] / 512.0D;
					double d36 = this.noise2[i12] / 512.0D;
					double d38 = (this.noise3[i12] / 10.0D + 1.0D) / 2.0D;
					if(d38 < 0.0D) {
						d30 = d34;
					} else if(d38 > 1.0D) {
						d30 = d36;
					} else {
						d30 = d34 + (d36 - d34) * d38;
					}

					d30 -= d32;
					if(i47 > i6 - 4) {
						double d40 = (double)((float)(i47 - (i6 - 4)) / 3.0F);
						d30 = d30 * (1.0D - d40) + -10.0D * d40;
					}

					d1[i12] = d30;
					++i12;
				}
			}
		}

		return d1;
	}

	public boolean chunkExists(int i1, int i2) {
		return true;
	}

	public void populate(IChunkProvider iChunkProvider1, int chunkX, int chunkZ) {
		BlockSand.fallInstantly = true;
		int x0 = chunkX * 16;
		int z0 = chunkZ * 16;
		
		BiomeGenBase biomeGenBase6 = this.worldObj.getBiomeGenForCoords(x0 + 16, z0 + 16);
		this.rand.setSeed(this.worldObj.getSeed());
		long j7 = this.rand.nextLong() / 2L * 2L + 1L;
		long j9 = this.rand.nextLong() / 2L * 2L + 1L;
		this.rand.setSeed((long)chunkX * j7 + (long)chunkZ * j9 ^ this.worldObj.getSeed());
		boolean z11 = false;
		boolean hadCustomFeat = false;		
		
		if(this.mapFeaturesEnabled) {
			if (SoftLock.hasReleaseStructures()) {
				this.mineshaftGenerator.generateStructuresInChunk(this.worldObj, this.rand, chunkX, chunkZ);
				z11 = this.villageGenerator.generateStructuresInChunk(this.worldObj, this.rand, chunkX, chunkZ);
				this.strongholdGenerator.generateStructuresInChunk(this.worldObj, this.rand, chunkX, chunkZ);
			}
			
			hadCustomFeat = this.featureProvider.populateFeatures(worldObj, rand, chunkX, chunkZ);		
		}
		
		int i12;
		int i13;
		int i14;
		if(!z11 && this.rand.nextInt(4) == 0) {
			i12 = x0 + this.rand.nextInt(16) + 8;
			i13 = this.rand.nextInt(128);
			i14 = z0 + this.rand.nextInt(16) + 8;
			(new WorldGenLakes(Block.waterStill.blockID)).generate(this.worldObj, this.rand, i12, i13, i14);
		}

		if(!z11 && this.rand.nextInt(8) == 0) {
			i12 = x0 + this.rand.nextInt(16) + 8;
			i13 = this.rand.nextInt(this.rand.nextInt(120) + 8);
			i14 = z0 + this.rand.nextInt(16) + 8;
			if(i13 < 63 || this.rand.nextInt(10) == 0) {
				(new WorldGenLakes(Block.lavaStill.blockID)).generate(this.worldObj, this.rand, i12, i13, i14);
			}
		}

		for(i12 = 0; i12 < 8; ++i12) {
			i13 = x0 + this.rand.nextInt(16) + 8;
			i14 = this.rand.nextInt(128);
			int i15 = z0 + this.rand.nextInt(16) + 8;
			if((new WorldGenDungeons()).generate(this.worldObj, this.rand, i13, i14, i15)) {
				;
			}
		}

		biomeGenBase6.decorate(this.worldObj, this.rand, x0, z0, hadCustomFeat);
		
		SpawnerAnimals.performWorldGenSpawning(this.worldObj, biomeGenBase6, x0 + 8, z0 + 8, 16, 16, this.rand);
		x0 += 8;
		z0 += 8;

		for(i12 = 0; i12 < 16; ++i12) {
			for(i13 = 0; i13 < 16; ++i13) {
				i14 = this.worldObj.getPrecipitationHeight(x0 + i12, z0 + i13);
				if(this.worldObj.isBlockHydratedDirectly(i12 + x0, i14 - 1, i13 + z0)) {
					this.worldObj.setBlockWithNotify(i12 + x0, i14 - 1, i13 + z0, Block.ice.blockID);
				}

				if(this.worldObj.canSnowAt(i12 + x0, i14, i13 + z0)) {
					this.worldObj.setBlockWithNotify(i12 + x0, i14, i13 + z0, Block.snow.blockID);
				}
			}
		}

		BlockSand.fallInstantly = false;
	}

	public boolean saveChunks(boolean z1, IProgressUpdate iProgressUpdate2) {
		return true;
	}

	public boolean unload100OldestChunks() {
		return false;
	}

	public boolean canSave() {
		return true;
	}

	public String makeString() {
		return "RandomLevelSource";
	}

	public List<SpawnListEntry> getPossibleCreatures(EnumCreatureType enumCreatureType1, int i2, int i3, int i4) {
		BiomeGenBase biomeGenBase5 = this.worldObj.getBiomeGenForCoords(i2, i4);
		return biomeGenBase5 == null ? null : biomeGenBase5.getSpawnableList(enumCreatureType1);
	}

	public ChunkPosition findClosestStructure(World world1, String string2, int i3, int i4, int i5) {
		return "Stronghold".equals(string2) && this.strongholdGenerator != null ? this.strongholdGenerator.getNearestInstance(world1, i3, i4, i5) : null;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:526)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:201)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:28:16.615
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:526)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:201)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:28:16.615
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:526)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:201)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:28:17.170
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.util.List;
import java.util.Random;

import com.mojontwins.minecraft.feature.FeatureProvider;

public class ChunkProviderGenerate implements IChunkProvider {
	protected Random rand;
	protected NoiseGeneratorOctaves noiseGen1;
	protected NoiseGeneratorOctaves noiseGen2;
	protected NoiseGeneratorOctaves noiseGen3;
	protected NoiseGeneratorOctaves noiseGenStone;
	protected NoiseGeneratorOctaves noiseGen5;
	protected NoiseGeneratorOctaves noiseGen6;
	
	protected World worldObj;
	protected final boolean mapFeaturesEnabled;
	
	protected double[] noiseArray;
	protected double[] stoneNoise = new double[256];
	
	protected MapGenBase caveGenerator = new MapGenCaves();
	protected MapGenBase ravineGenerator = new MapGenRavine();
	protected MapGenStronghold strongholdGenerator = new MapGenStronghold();
	protected MapGenVillage villageGenerator = new MapGenVillage(0);
	protected MapGenMineshaft mineshaftGenerator = new MapGenMineshaft();
	
	// Multi-chunk features	
	public FeatureProvider featureProvider;
	
	protected BiomeGenBase[] biomesForGeneration;
	
	double[] noise3;
	double[] noise1;
	double[] noise2;
	double[] noise5;
	double[] noise6;
	float[] distanceArray;
	int[][] unusedArray = new int[32][32];
	protected boolean isOcean;

	public ChunkProviderGenerate(World world1, long j2, boolean z4) {
		this.worldObj = world1;
		this.mapFeaturesEnabled = z4;
		this.rand = new Random(j2);
		this.noiseGen1 = new NoiseGeneratorOctaves(this.rand, 16);
		this.noiseGen2 = new NoiseGeneratorOctaves(this.rand, 16);
		this.noiseGen3 = new NoiseGeneratorOctaves(this.rand, 8);
		this.noiseGenStone = new NoiseGeneratorOctaves(this.rand, 4);
		this.noiseGen5 = new NoiseGeneratorOctaves(this.rand, 10);
		this.noiseGen6 = new NoiseGeneratorOctaves(this.rand, 16);
		
		this.featureProvider = new FeatureProvider(worldObj, this);
	}

	public void generateTerrain(int chunkX, int chunkZ, byte[] blocks) {
		int quadrantSize = 4;
		int seaLevel = 64;
		int cellSize = quadrantSize + 1;
		int columnSize = 17;
		
		double scalingFactor = 0.25D;
		this.isOcean = true;

		// Split in 4x16x4 sections
		for(int xSection = 0; xSection < quadrantSize; ++xSection) {
			for(int zSection = 0; zSection < quadrantSize; ++zSection) {
				
				for(int ySection = 0; ySection < 16; ++ySection) {

					double noiseA = this.noiseArray[((xSection + 0) * cellSize + zSection + 0) * columnSize + ySection + 0];
					double noiseB = this.noiseArray[((xSection + 0) * cellSize + zSection + 1) * columnSize + ySection + 0];
					double noiseC = this.noiseArray[((xSection + 1) * cellSize + zSection + 0) * columnSize + ySection + 0];
					double noiseD = this.noiseArray[((xSection + 1) * cellSize + zSection + 1) * columnSize + ySection + 0];
					double noiseAinc = (this.noiseArray[((xSection + 0) * cellSize + zSection + 0) * columnSize + ySection + 1] - noiseA) * 0.125D;
					double noiseBinc = (this.noiseArray[((xSection + 0) * cellSize + zSection + 1) * columnSize + ySection + 1] - noiseB) * 0.125D;
					double noiseCinc = (this.noiseArray[((xSection + 1) * cellSize + zSection + 0) * columnSize + ySection + 1] - noiseC) * 0.125D;
					double noiseDinc = (this.noiseArray[((xSection + 1) * cellSize + zSection + 1) * columnSize + ySection + 1] - noiseD) * 0.125D;

					for(int y = 0; y < 8; ++y) {						
						double curNoiseA = noiseA;
						double curNoiseB = noiseB;
						double curNoiseAinc = (noiseC - noiseA) * scalingFactor;
						double curNoiseBinc = (noiseD - noiseB) * scalingFactor;

						for(int x = 0; x < 4; ++x) {
							int indexInBlockArray = (x + (xSection << 2)) << 11 | (0 + (zSection << 2)) << 7 | (ySection << 3) + y;
							
							double density = curNoiseA;
							double densityIncrement = (curNoiseB - curNoiseA) * 0.25D;

							int yy = ySection * 8 + y;
							for(int z = 0; z < 4; ++z) {
								
								int blockID = 0;

								// Fill with water with a layer of ice if suitable								
								if(yy < seaLevel) {
									blockID = Block.waterStill.blockID;
								}

								// World density positive: fill with block.
								if(density > 0.0D) {
									blockID = Block.stone.blockID;
								}

								blocks[indexInBlockArray] = (byte)blockID;

								// Next Z
								indexInBlockArray += 128;
								density += densityIncrement;
								
								// Ocean detector
								if(yy == seaLevel - 1) this.isOcean &= (blockID != Block.stone.blockID);
							}

							curNoiseA += curNoiseAinc;
							curNoiseB += curNoiseBinc;
						}

						noiseA += noiseAinc;
						noiseB += noiseBinc;
						noiseC += noiseCinc;
						noiseD += noiseDinc;
					}
				}
			}
		}
	}

	public void replaceBlocksForBiome(int chunkX, int chunkZ, byte[] blocks, byte[] metadata, BiomeGenBase[] biomes) {
		byte seaLevel = 63;
		double d6 = 8.0D / 256D;
		this.stoneNoise = this.noiseGenStone.generateNoiseOctaves(this.stoneNoise, chunkX * 16, chunkZ * 16, 0, 16, 16, 1, d6 * 2.0D, d6 * 2.0D, d6 * 2.0D);

		BiomeGenBase biomeGen;
		
		for(int z = 0; z < 16; ++z) {
			for(int x = 0; x < 16; ++x) {
				biomeGen = biomes[x + z * 16];
				
				biomeGen.replaceBlocksForBiome(this, this.worldObj, this.rand, 
						chunkX, chunkZ, x, z, 
						blocks, metadata, seaLevel, 
						null, null, this.stoneNoise[z + x * 16]);
			}
		}
	}
				
				float temperature = biomeGen.getFloatTemperature();
				int height = (int)(this.stoneNoise[z + x * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
				
				int stoneHeight = -1;
				byte topBlock = biomeGen.getTopBlock(this.rand);
				byte fillerBlock = biomeGen.getFillBlock(this.rand);

				for(int y = 127; y >= 0; --y) {
					int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
					if(y <= 0 + this.rand.nextInt(5)) {
						blocks[index] = (byte)Block.bedrock.blockID;
					} else {
						byte blockID = blocks[index];
						if(blockID == 0) {
							stoneHeight = -1;
						} else if(blockID == Block.stone.blockID) {
							if(stoneHeight == -1) {
								if(height <= 0) {
									topBlock = 0;
									fillerBlock = (byte)Block.stone.blockID;
								} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
									topBlock = biomeGen.getTopBlock(this.rand);
									fillerBlock = biomeGen.getFillBlock(this.rand);
								}

								if(y < seaLevel && topBlock == 0) {
									if(temperature < 0.15F) {
										topBlock = (byte)Block.ice.blockID;
									} else {
										topBlock = (byte)Block.waterStill.blockID;
									}
								}

								stoneHeight = height;
								if(y >= seaLevel - 1) {
									blocks[index] = topBlock;
								} else {
									blocks[index] = fillerBlock;
								}
							} else if(stoneHeight > 0) {
								--stoneHeight;
								blocks[index] = fillerBlock;
								if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
									stoneHeight = this.rand.nextInt(4);
									fillerBlock = this.sandstoneGenBlock();
								}
							}
						}
					}
				}
			}
		}

	}

	public Chunk loadChunk(int i1, int i2) {
		return this.provideChunk(i1, i2);
	}
	
	protected byte[] createByteArray() {
		return new byte[32768];
	}

	public Chunk provideChunk(int chunkX, int chunkZ) {
		this.rand.setSeed((long)chunkX * 341873128712L + (long)chunkZ * 132897987541L);

		byte[] blockArray = this.createByteArray();
		byte[] metadataArray = this.createByteArray();
		this.generateTerrain(chunkX, chunkZ, blockArray);

		this.biomesForGeneration = this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration, chunkX * 16, chunkZ * 16, 16, 16);
		
		this.replaceBlocksForBiome(chunkX, chunkZ, blockArray, metadataArray, this.biomesForGeneration);
		
		this.caveGenerator.generate(this, this.worldObj, chunkX, chunkZ, blockArray);
		this.ravineGenerator.generate(this, this.worldObj, chunkX, chunkZ, blockArray);
		
		if(this.mapFeaturesEnabled && SoftLock.hasReleaseStructures()) {
			this.mineshaftGenerator.generate(this, this.worldObj, chunkX, chunkZ, blockArray);
			this.villageGenerator.generate(this, this.worldObj, chunkX, chunkZ, blockArray);
			this.strongholdGenerator.generate(this, this.worldObj, chunkX, chunkZ, blockArray);
		}

		Chunk chunk = new Chunk(this.worldObj, blockArray, chunkX, chunkZ);

		if (this.mapFeaturesEnabled) {
			this.featureProvider.getNearestFeatures(chunkX, chunkZ, chunk);
		} 

		byte[] biomeArray = chunk.getBiomeArray();

		for(int i6 = 0; i6 < biomeArray.length; ++i6) {
			biomeArray[i6] = (byte)this.biomesForGeneration[i6].biomeID;
		}

		chunk.generateSkylightMap();
		return chunk;
	}

	public Chunk justGenerate(int chunkX, int chunkZ) {
		this.rand.setSeed((long)chunkX * 341873128712L + (long)chunkZ * 132897987541L);
		byte[] blockArray = this.createByteArray();
		this.generateTerrain(chunkX, chunkZ, blockArray);
		
		Chunk chunk = new Chunk(this.worldObj, blockArray, chunkX, chunkZ);
		
		return chunk;
	}

	public double[] initializeNoiseField(double[] d1, int i2, int i3, int i4, int i5, int i6, int i7) {
		if(d1 == null) {
			d1 = new double[i5 * i6 * i7];
		}

		if(this.distanceArray == null) {
			this.distanceArray = new float[25];

			for(int i8 = -2; i8 <= 2; ++i8) {
				for(int i9 = -2; i9 <= 2; ++i9) {
					float f10 = 10.0F / MathHelper.sqrt_float((float)(i8 * i8 + i9 * i9) + 0.2F);
					this.distanceArray[i8 + 2 + (i9 + 2) * 5] = f10;
				}
			}
		}

		double d44 = 684.412D;
		double d45 = 684.412D;
		this.noise5 = this.noiseGen5.generateNoiseOctaves(this.noise5, i2, i4, i5, i7, 1.121D, 1.121D, 0.5D);
		this.noise6 = this.noiseGen6.generateNoiseOctaves(this.noise6, i2, i4, i5, i7, 200.0D, 200.0D, 0.5D);
		this.noise3 = this.noiseGen3.generateNoiseOctaves(this.noise3, i2, i3, i4, i5, i6, i7, d44 / 80.0D, d45 / 160.0D, d44 / 80.0D);
		this.noise1 = this.noiseGen1.generateNoiseOctaves(this.noise1, i2, i3, i4, i5, i6, i7, d44, d45, d44);
		this.noise2 = this.noiseGen2.generateNoiseOctaves(this.noise2, i2, i3, i4, i5, i6, i7, d44, d45, d44);
		int i12 = 0;
		int i13 = 0;

		for(int i14 = 0; i14 < i5; ++i14) {
			for(int i15 = 0; i15 < i7; ++i15) {
				float maxHeightScaled = 0.0F;
				float minHeightScaled = 0.0F;
				float totalDistance = 0.0F;
				byte b19 = 2;
				BiomeGenBase biomeGenBase20 = this.biomesForGeneration[i14 + 2 + (i15 + 2) * (i5 + 5)];

				for(int i21 = -b19; i21 <= b19; ++i21) {
					for(int i22 = -b19; i22 <= b19; ++i22) {
						BiomeGenBase biomeGenBase23 = this.biomesForGeneration[i14 + i21 + 2 + (i15 + i22 + 2) * (i5 + 5)];
						float distance = this.distanceArray[i21 + 2 + (i22 + 2) * 5] / (biomeGenBase23.minHeight + 2.0F);
						if(biomeGenBase23.minHeight > biomeGenBase20.minHeight) {
							distance /= 2.0F;
						}

						maxHeightScaled += biomeGenBase23.maxHeight * distance;
						minHeightScaled += biomeGenBase23.minHeight * distance;
						totalDistance += distance;
					}
				}

				float avgMaxHeight = maxHeightScaled / totalDistance;
				float avgMinHeight = minHeightScaled / totalDistance;
				
				avgMaxHeight = avgMaxHeight * 0.9F + 0.1F;
				avgMinHeight = (avgMinHeight * 4.0F - 1.0F) / 8.0F;
				
				double d46 = this.noise6[i13] / 8000.0D;
				if(d46 < 0.0D) {
					d46 = -d46 * 0.3D;
				}

				d46 = d46 * 3.0D - 2.0D;
				if(d46 < 0.0D) {
					d46 /= 2.0D;
					if(d46 < -1.0D) {
						d46 = -1.0D;
					}

					d46 /= 1.4D;
					d46 /= 2.0D;
				} else {
					if(d46 > 1.0D) {
						d46 = 1.0D;
					}

					d46 /= 8.0D;
				}

				++i13;

				for(int i47 = 0; i47 < i6; ++i47) {
					double d48 = (double)avgMinHeight;
					double d26 = (double)avgMaxHeight;
					d48 += d46 * 0.2D;
					d48 = d48 * (double)i6 / 16.0D;
					double d28 = (double)i6 / 2.0D + d48 * 4.0D;
					double d30 = 0.0D;
					double d32 = ((double)i47 - d28) * 12.0D * 128.0D / 128.0D / d26;
					if(d32 < 0.0D) {
						d32 *= 4.0D;
					}

					double d34 = this.noise1[i12] / 512.0D;
					double d36 = this.noise2[i12] / 512.0D;
					double d38 = (this.noise3[i12] / 10.0D + 1.0D) / 2.0D;
					if(d38 < 0.0D) {
						d30 = d34;
					} else if(d38 > 1.0D) {
						d30 = d36;
					} else {
						d30 = d34 + (d36 - d34) * d38;
					}

					d30 -= d32;
					if(i47 > i6 - 4) {
						double d40 = (double)((float)(i47 - (i6 - 4)) / 3.0F);
						d30 = d30 * (1.0D - d40) + -10.0D * d40;
					}

					d1[i12] = d30;
					++i12;
				}
			}
		}

		return d1;
	}

	public boolean chunkExists(int i1, int i2) {
		return true;
	}

	public void populate(IChunkProvider iChunkProvider1, int chunkX, int chunkZ) {
		BlockSand.fallInstantly = true;
		int x0 = chunkX * 16;
		int z0 = chunkZ * 16;
		
		BiomeGenBase biomeGenBase6 = this.worldObj.getBiomeGenForCoords(x0 + 16, z0 + 16);
		this.rand.setSeed(this.worldObj.getSeed());
		long j7 = this.rand.nextLong() / 2L * 2L + 1L;
		long j9 = this.rand.nextLong() / 2L * 2L + 1L;
		this.rand.setSeed((long)chunkX * j7 + (long)chunkZ * j9 ^ this.worldObj.getSeed());
		boolean z11 = false;
		boolean hadCustomFeat = false;		
		
		if(this.mapFeaturesEnabled) {
			if (SoftLock.hasReleaseStructures()) {
				this.mineshaftGenerator.generateStructuresInChunk(this.worldObj, this.rand, chunkX, chunkZ);
				z11 = this.villageGenerator.generateStructuresInChunk(this.worldObj, this.rand, chunkX, chunkZ);
				this.strongholdGenerator.generateStructuresInChunk(this.worldObj, this.rand, chunkX, chunkZ);
			}
			
			hadCustomFeat = this.featureProvider.populateFeatures(worldObj, rand, chunkX, chunkZ);		
		}
		
		int i12;
		int i13;
		int i14;
		if(!z11 && this.rand.nextInt(4) == 0) {
			i12 = x0 + this.rand.nextInt(16) + 8;
			i13 = this.rand.nextInt(128);
			i14 = z0 + this.rand.nextInt(16) + 8;
			(new WorldGenLakes(Block.waterStill.blockID)).generate(this.worldObj, this.rand, i12, i13, i14);
		}

		if(!z11 && this.rand.nextInt(8) == 0) {
			i12 = x0 + this.rand.nextInt(16) + 8;
			i13 = this.rand.nextInt(this.rand.nextInt(120) + 8);
			i14 = z0 + this.rand.nextInt(16) + 8;
			if(i13 < 63 || this.rand.nextInt(10) == 0) {
				(new WorldGenLakes(Block.lavaStill.blockID)).generate(this.worldObj, this.rand, i12, i13, i14);
			}
		}

		for(i12 = 0; i12 < 8; ++i12) {
			i13 = x0 + this.rand.nextInt(16) + 8;
			i14 = this.rand.nextInt(128);
			int i15 = z0 + this.rand.nextInt(16) + 8;
			if((new WorldGenDungeons()).generate(this.worldObj, this.rand, i13, i14, i15)) {
				;
			}
		}

		biomeGenBase6.decorate(this.worldObj, this.rand, x0, z0, hadCustomFeat);
		
		SpawnerAnimals.performWorldGenSpawning(this.worldObj, biomeGenBase6, x0 + 8, z0 + 8, 16, 16, this.rand);
		x0 += 8;
		z0 += 8;

		for(i12 = 0; i12 < 16; ++i12) {
			for(i13 = 0; i13 < 16; ++i13) {
				i14 = this.worldObj.getPrecipitationHeight(x0 + i12, z0 + i13);
				if(this.worldObj.isBlockHydratedDirectly(i12 + x0, i14 - 1, i13 + z0)) {
					this.worldObj.setBlockWithNotify(i12 + x0, i14 - 1, i13 + z0, Block.ice.blockID);
				}

				if(this.worldObj.canSnowAt(i12 + x0, i14, i13 + z0)) {
					this.worldObj.setBlockWithNotify(i12 + x0, i14, i13 + z0, Block.snow.blockID);
				}
			}
		}

		BlockSand.fallInstantly = false;
	}

	public boolean saveChunks(boolean z1, IProgressUpdate iProgressUpdate2) {
		return true;
	}

	public boolean unload100OldestChunks() {
		return false;
	}

	public boolean canSave() {
		return true;
	}

	public String makeString() {
		return "RandomLevelSource";
	}

	public List<SpawnListEntry> getPossibleCreatures(EnumCreatureType enumCreatureType1, int i2, int i3, int i4) {
		BiomeGenBase biomeGenBase5 = this.worldObj.getBiomeGenForCoords(i2, i4);
		return biomeGenBase5 == null ? null : biomeGenBase5.getSpawnableList(enumCreatureType1);
	}

	public ChunkPosition findClosestStructure(World world1, String string2, int i3, int i4, int i5) {
		return "Stronghold".equals(string2) && this.strongholdGenerator != null ? this.strongholdGenerator.getNearestInstance(world1, i3, i4, i5) : null;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:526)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:201)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:439)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:366)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:326)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:276)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor60.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:319)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:253)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:487)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:584)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:653)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:443)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1268)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1036)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1061)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1046)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1088)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1084)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1513)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4884)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4762)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4930)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3624)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:28:17.171
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:526)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:201)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:439)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:366)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:326)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:276)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor60.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:319)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:253)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:487)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:584)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:653)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:443)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1268)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1036)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1061)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1046)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1088)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1084)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1513)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4884)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4762)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4930)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3624)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:28:17.171
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:526)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:201)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:439)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:366)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:326)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:276)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor60.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:319)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:253)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:487)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:584)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:653)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:443)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1268)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1036)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1061)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1046)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1088)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1084)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1513)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4884)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4762)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4930)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3624)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:02.995
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		BiomeGenBase biomeGen = biomes[x + z * 16];
		float temperature = biomeGen.getFloatTemperature();
		int height = (int)(this.stoneNoise[z + x * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2025-07-15 23:33:02.995
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2025-07-15 23:33:02.995
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:03.027
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		BiomeGenBase biomeGen = biomes[x + z * 16];
		float temperature = biomeGen.getFloatTemperature();
		int height = (int)(this.stoneNoise[z + x * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:33:03.027
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:33:03.027
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:14.757
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		BiomeGenBase biomeGen = biomes[x + z * 16];
		float temperature = biomeGen.getFloatTemperature();
		int height = (int)(this.stoneNoise[z + x * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:33:14.757
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:33:14.758
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:15.318
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		BiomeGenBase biomeGen = biomes[x + z * 16];
		float temperature = biomeGen.getFloatTemperature();
		int height = (int)(this.stoneNoise[z + x * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:33:15.319
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:33:15.319
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:15.352
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		BiomeGenBase biomeGen = biomes[x + z * 16];
		float temperature = biomeGen.getFloatTemperature();
		int height = (int)(this.stoneNoise[z + x * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:33:15.353
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:33:15.353
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:19.058
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
	float temperature = biomeGen.getFloatTemperature();
		int height = (int)(this.stoneNoise[z + x * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2025-07-15 23:33:19.059
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2025-07-15 23:33:19.059
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:19.090
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
	float temperature = biomeGen.getFloatTemperature();
		int height = (int)(this.stoneNoise[z + x * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:33:19.091
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:33:19.091
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:20.070
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = biomeGen.getFloatTemperature();
		int height = (int)(this.stoneNoise[z + x * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2025-07-15 23:33:20.070
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2025-07-15 23:33:20.071
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:20.749
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = biomeGen.getFloatTemperature();
		int height = (int)(this.stoneNoise[z + x * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:33:20.750
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:33:20.750
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:20.832
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = biomeGen.getFloatTemperature();
		int height = (int)(this.stoneNoise[z + x * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:33:20.833
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:33:20.834
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:22.082
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(this.stoneNoise[z + x * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2025-07-15 23:33:22.083
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2025-07-15 23:33:22.083
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:22.115
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(this.stoneNoise[z + x * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:33:22.115
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:33:22.116
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:26.096
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(this.stoneNoise[z + x * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2025-07-15 23:33:26.096
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2025-07-15 23:33:26.097
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:28.303
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(this.stoneNoise[z + x * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:33:28.305
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:33:28.305
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:34.706
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(this.stoneNoise[z + x * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:33:34.707
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:33:34.708
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:44.383
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(this.stoneNoise[z + x * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:33:44.383
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:33:44.384
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:46.243
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(this.stoneNoise[z + x * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:33:46.244
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:33:46.245
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:46.729
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(this.stoneNoise[z + x * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:33:46.730
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:33:46.731
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:46.763
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(this.stoneNoise[z + x * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:33:46.764
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:33:46.764
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:49.122
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(stonenoise / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2025-07-15 23:33:49.122
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2025-07-15 23:33:49.123
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:49.162
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(stonenoise / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:33:49.163
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:33:49.163
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:50.477
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(stonenoise / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:33:50.478
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:33:50.478
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:51.388
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(stonenoise / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:33:51.389
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:33:51.389
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:52.635
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(stoneNoise / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2025-07-15 23:33:52.635
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2025-07-15 23:33:52.636
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:57.580
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(stoneNoise / 3.0D + 3.0D + rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:33:57.581
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:33:57.582
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:57.649
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(stoneNoise / 3.0D + 3.0D + rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2025-07-15 23:33:57.650
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2025-07-15 23:33:57.650
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:33:59.662
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(stoneNoise / 3.0D + 3.0D + rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2025-07-15 23:33:59.663
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2025-07-15 23:33:59.663
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:34:00.922
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(stoneNoise / 3.0D + 3.0D + rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:34:00.922
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:34:00.923
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:34:00.955
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(stoneNoise / 3.0D + 3.0D + rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:34:00.957
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:34:00.957
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:34:04.150
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(stoneNoise / 3.0D + 3.0D + rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:34:04.151
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:34:04.151
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:34:04.212
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(stoneNoise / 3.0D + 3.0D + rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:34:04.213
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:34:04.213
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:34:04.241
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(stoneNoise / 3.0D + 3.0D + rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = biomeGen.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1036)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.ui 4 0 2025-07-15 23:34:04.242
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1036)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:34:05.677
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(stoneNoise / 3.0D + 3.0D + rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = this.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2025-07-15 23:34:05.678
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2025-07-15 23:34:05.679
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:34:05.715
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(stoneNoise / 3.0D + 3.0D + rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = this.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:34:05.716
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:34:05.716
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:34:07.486
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(stoneNoise / 3.0D + 3.0D + rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = this.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:34:07.487
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:34:07.487
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:34:08.873
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(stoneNoise / 3.0D + 3.0D + rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = this.getTopBlock(this.rand);
		byte fillerBlock = biomeGen.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:34:08.874
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:34:08.874
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:34:10.192
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(stoneNoise / 3.0D + 3.0D + rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = this.getTopBlock(this.rand);
		byte fillerBlock = hit.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2025-07-15 23:34:10.193
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2025-07-15 23:34:10.193
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:34:10.225
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(stoneNoise / 3.0D + 3.0D + rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = this.getTopBlock(this.rand);
		byte fillerBlock = hit.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:34:10.225
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:34:10.226
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:34:11.703
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(stoneNoise / 3.0D + 3.0D + rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = this.getTopBlock(this.rand);
		byte fillerBlock = this.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2025-07-15 23:34:11.704
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2025-07-15 23:34:11.704
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:34:13.686
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(stoneNoise / 3.0D + 3.0D + rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = this.getTopBlock(this.rand);
		byte fillerBlock = this.getFillBlock(this.rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:34:13.686
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:34:13.687
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:34:14.713
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(stoneNoise / 3.0D + 3.0D + rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = this.getTopBlock(this.rand);
		byte fillerBlock = this.getFillBlock(rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2025-07-15 23:34:14.715
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2025-07-15 23:34:14.715
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:34:14.744
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(stoneNoise / 3.0D + 3.0D + rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = this.getTopBlock(this.rand);
		byte fillerBlock = this.getFillBlock(rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2025-07-15 23:34:14.744
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2025-07-15 23:34:14.745
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2025-07-15 23:34:14.958
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.minecraft.src;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

public abstract class BiomeGenBase {
	public static TreeMap<Integer,List<BiomeGenBase>> biomeStructure = null;
	
	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];

	public static final BiomeGenBase alpha = (new BiomeGenAlpha(23)).setBiomeType(BiomeType.forest).setColor(2250012).setBiomeName("Alpha").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.5F,0.5F);
	public static final BiomeGenBase alphaCold = (new BiomeGenAlphaCold(24)).setBiomeType(BiomeType.veryCold).setColor(2250012).setBiomeName("Alpha Winter").setEnableSnow().setMinMaxHeight(0.0F,2.0F).setTemperatureRainfall(0.1F,0.5F);
	
	public String biomeName;
	public int color;
	public byte topBlock = (byte)Block.grass.blockID;
	public byte fillerBlock = (byte)Block.dirt.blockID;
	public int biomeColor = 5169201;
	public float minHeight = 0.1F;
	public float maxHeight = 0.3F;
	public float temperature = 0.5F;
	public float rainfall = 0.5F;
	public int waterColorMultiplier = 0xFFFFFF;
	public BiomeDecorator biomeDecorator;
	protected List<SpawnListEntry> spawnableMonsterList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableWaterCreatureList = new ArrayList<SpawnListEntry>();
	protected List<SpawnListEntry> spawnableCaveCreatureList = new ArrayList<SpawnListEntry>();
	private boolean enableSnow;
	private boolean enableRain = true;
	public final int biomeID;
	protected WorldGenTrees worldGenTrees = new WorldGenTrees(false);
	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
	protected WorldGenForest worldGenForest = new WorldGenForest(false);
	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
	public BiomeType biomeType;
	
	protected Weather weather = Weather.normal;

	protected BiomeGenBase(int i1) {
		this.biomeID = i1;
		biomeList[i1] = this;
		
		this.biomeType = BiomeType.stitch;
		
		this.biomeDecorator = this.createBiomeDecorator();
		
		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		if(SoftLock.useNewAIMobs()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		} else {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicZombie.class, 10, 4, 4));
			this.spawnableMonsterList.add(new SpawnListEntry(EntityClassicSkeleton.class, 10, 4, 4));
		}
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		
		if(SoftLock.enableEndermen()) {
			this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		}
				
		if(SoftLock.enableSquids()) {
			this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		}
		
	}
	
	public byte getTopBlock(Random rand) {
		return this.topBlock;
	}
	
	public byte getFillBlock(Random rand) {
		return this.fillerBlock;
	}

	public BiomeGenBase setBiomeType(BiomeType biomeType) {
		this.biomeType = biomeType;
		return this;
	}
	
	protected BiomeDecorator createBiomeDecorator() {
		return new BiomeDecorator(this);
	}

	public BiomeGenBase setTemperatureRainfall(float f1, float f2) {
		/*if(f1 > 0.1F && f1 < 0.2F) {
			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
		} else*/ {
			this.temperature = f1;
			this.rainfall = f2;
			return this;
		}
	}
	
	public float getTerrainHeightVariance() {
		return this.maxHeight - this.minHeight;
	}

	public BiomeGenBase setMinMaxHeight(float f1, float f2) {
		this.minHeight = f1;
		this.maxHeight = f2;
		return this;
	}

	public BiomeGenBase setDisableRain() {
		this.enableRain = false;
		return this;
	}

	public WorldGenerator getRandomWorldGenForTrees(Random random1) {
		return (WorldGenerator)(random1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
	}

	public WorldGenerator getRandomWorldGenForGrass(Random random1) {
		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	}

	public BiomeGenBase setEnableSnow() {
		this.enableSnow = true;
		return this;
	}

	public BiomeGenBase setBiomeName(String string1) {
		this.biomeName = string1;
		return this;
	}

	public BiomeGenBase setBiomeColor(int i1) {
		this.biomeColor = i1;
		return this;
	}

	public BiomeGenBase setColor(int i1) {
		this.biomeColor = i1;
		this.color = i1;
		return this;
	}

	public int getSkyColorByTemp(float f1) {
		f1 /= 3.0F;
		if(f1 < -1.0F) {
			f1 = -1.0F;
		}

		if(f1 > 1.0F) {
			f1 = 1.0F;
		}

		return Color.getHSBColor(0.62222224F - f1 * 0.05F, 0.5F + f1 * 0.1F, 1.0F).getRGB();
	}

	public List<SpawnListEntry> getSpawnableList(EnumCreatureType enumCreatureType1) {
		return enumCreatureType1 == EnumCreatureType.monster ? 
				this.spawnableMonsterList : 
					(enumCreatureType1 == EnumCreatureType.creature ? 
							this.spawnableCreatureList : 
								(enumCreatureType1 == EnumCreatureType.waterCreature ? 
										this.spawnableWaterCreatureList : 
											(enumCreatureType1 == EnumCreatureType.cave ? 
													this.spawnableCaveCreatureList :
														null)));
	}

	public boolean getEnableSnow() {
		return this.enableSnow;
	}

	public boolean canSpawnLightningBolt() {
		return this.enableSnow ? false : this.enableRain;
	}

	public boolean isHighHumidity() {
		return this.rainfall > 0.85F;
	}

	public float getSpawningChance() {
		return 0.1F;
	}

	public final int getIntRainfall() {
		return (int)(this.rainfall * 65536.0F);
	}

	public final int getIntTemperature() {
		return (int)(this.temperature * 65536.0F);
	}

	public final float getFloatRainfall() {
		return this.rainfall;
	}

	public final float getFloatTemperature() {
		return this.temperature;
	}

	public void decorate(World world1, Random random2, int i3, int i4, boolean hadFeature) {
		this.biomeDecorator.decorate(world1, random2, i3, i4, hadFeature);
	}

	public int getBiomeGrassColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerGrass.getGrassColor(d1, d3);
	}

	public int getBiomeFoliageColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFoliage.getFoliageColor(d1, d3);
	}

	public int getBiomeWaterColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerWater.getWaterColor(d1, d3);
	}
	
	public int getBiomeFogColor() {
		double d1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
		double d3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
		return ColorizerFog.getFogColor(d1, d3);
	}
	
	public String toString() {
		return this.biomeName;
	}
	
	public static int makeBiomeHash(BiomeGenBase biome) {
		return (((int)(biome.temperature * 100.0F)) << 8) | (int)(biome.rainfall * 100.0F);
	}
	
	public static float getTemperatureFromHash(Integer hash) {
		return (float)(hash >> 8) / 100.0F;
	}
	
	public static float getRainfallFromHash(Integer hash) {
		return (float)(hash & 0xFF) / 100.0F;
	}

	public static void buildBiomeStructure(BiomeGenBase[] biomesForWorldType) {
		biomeStructure = new TreeMap<Integer,List<BiomeGenBase>> ();
		
		for(BiomeGenBase biome : biomesForWorldType) {
			Integer hash = Integer.valueOf(makeBiomeHash(biome));
			if(!biomeStructure.containsKey(hash)) {
				biomeStructure.put(hash, new ArrayList<BiomeGenBase> ());
			}
			
			biomeStructure.get(hash).add(biome);
		}
		
		printBiomeStructure();
	}
	
	public static void printBiomeStructure() {
		   for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
		        List<BiomeGenBase> biomeList = entry.getValue();
		        Integer hash= entry.getKey();
		        
		        System.out.print ("[" + hash + "] (" + getTemperatureFromHash(hash) + ", " + getRainfallFromHash(hash) + ") ");
		        for(BiomeGenBase biome : biomeList) {
		        	System.out.print("<" + biome + "> ");
		        }
		        System.out.println();
		   }
	}

	public static int getClosestMatch(float tem, float hum, Random rand) {
		// Finds the closest t/h match in biomeStructure using euclidean distance.
		float minDistanceSq = Float.MAX_VALUE;
		Integer pickedHash = null;
		
		for (Map.Entry<Integer,List<BiomeGenBase>> entry : biomeStructure.entrySet()) {
			Integer hash= entry.getKey();
	        
	        float currentTem = getTemperatureFromHash(hash);
	        float currentHum = getRainfallFromHash(hash);
	        
	        float dt = currentTem - tem;
	        float dh = currentHum - hum;
	        float distanceSq = dt * dt + dh * dh;
	        if(distanceSq < minDistanceSq) {
	        	minDistanceSq = distanceSq;
	        	pickedHash = hash;
	        }
		}
		
		if(pickedHash != null) {
			List<BiomeGenBase> biomeList = biomeStructure.get(pickedHash);
			return biomeList.get(rand.nextInt(biomeList.size())).biomeID;
		} else {
			return alpha.biomeID;
		}
	}
	
	public void replaceBlocksForBiome(IChunkProvider generator, World world, Random rand, int chunkX, int chunkZ, int x, int z, byte[] blocks, byte[] metadata, int seaLevel, double sandNoise, double gravelNoise, double stoneNoise) {
		float temperature = this.getFloatTemperature();
		int height = (int)(stoneNoise / 3.0D + 3.0D + rand.nextDouble() * 0.25D);
		
		int stoneHeight = -1;
		byte topBlock = this.getTopBlock(this.rand);
		byte fillerBlock = this.getFillBlock(rand);

		for(int y = 127; y >= 0; --y) {
			int index = x << 11 | z << 7 | y; (x * 16 + z) * 128 + y;
			if(y <= 0 + this.rand.nextInt(5)) {
				blocks[index] = (byte)Block.bedrock.blockID;
			} else {
				byte blockID = blocks[index];
				if(blockID == 0) {
					stoneHeight = -1;
				} else if(blockID == Block.stone.blockID) {
					if(stoneHeight == -1) {
						if(height <= 0) {
							topBlock = 0;
							fillerBlock = (byte)Block.stone.blockID;
						} else if(y >= seaLevel - 4 && y <= seaLevel + 1) {
							topBlock = biomeGen.getTopBlock(this.rand);
							fillerBlock = biomeGen.getFillBlock(this.rand);
						}

						if(y < seaLevel && topBlock == 0) {
							if(temperature < 0.15F) {
								topBlock = (byte)Block.ice.blockID;
							} else {
								topBlock = (byte)Block.waterStill.blockID;
							}
						}

						stoneHeight = height;
						if(y >= seaLevel - 1) {
							blocks[index] = topBlock;
						} else {
							blocks[index] = fillerBlock;
						}
					} else if(stoneHeight > 0) {
						--stoneHeight;
						blocks[index] = fillerBlock;
						if(stoneHeight == 0 && fillerBlock == this.sandstoneGenTriggerer()) {
							stoneHeight = this.rand.nextInt(4);
							fillerBlock = this.sandstoneGenBlock();
						}
					}
				}
			}
		}
	}
	
	public byte sandstoneGenTriggerer() {
		return (byte)Block.sand.blockID;
	}
	
	public byte sandstoneGenBlock() {
		return (byte)Block.sandStone.blockID;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
